Перем ТипыДокументов;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Параметры.Свойство("ДополнительнаяОбработкаСсылка", ДополнительнаяОбработкаСсылка);
	Для Каждого ЭлементСписка Из ТипыДокументов Цикл
		СтрокаТЧ = Объект.ТаблицаТиповДокументов.Добавить();
		СтрокаТЧ.ТипДокумента = ЭлементСписка.Ключ;
		СтрокаТЧ.Признак = ЭлементСписка.Значение;
	КонецЦикла;
	
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	
	Макет = ОбъектДляСервера.ПолучитьМакет("Классификатор");
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Макет.ПолучитьТекст());
	
	ОбъектДляСервера.Классификатор.Загрузить(СериализаторXDTO.ПрочитатьXML(Чтение));
	
	КлассификаторXML = ОбъектДляСервера.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст();
	
	КлассификаторТаблица = ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	Для Каждого ЗаписьОКВ Из КлассификаторТаблица Цикл
		НоваяСтрока = ОбъектДляСервера.Валюты.Добавить();
		НоваяСтрока.КодВалютыЦифровой         = ЗаписьОКВ.Code;
		НоваяСтрока.КодВалютыБуквенный        = ЗаписьОКВ.CodeSymbol;
		НоваяСтрока.Наименование              = ЗаписьОКВ.Name;
		НоваяСтрока.СтраныИТерритории         = ЗаписьОКВ.Description;
		НоваяСтрока.Загружается               = ЗаписьОКВ.RBCLoading;
		НоваяСтрока.ПараметрыПрописиНаРусском = ЗаписьОКВ.NumerationItemOptions;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
	
	ПараметрыСоединения = СтроковыеФункцииКлиентСервер.ПолучитьПараметрыИзСтроки(СтрокаСоединенияИнформационнойБазы());
	Если ПараметрыСоединения.Свойство("Ref") И ПараметрыСоединения.Свойство("Srvr") Тогда
		Если ПараметрыСоединения.Ref = "MercuryClassicSH" Тогда
			Объект.КодТовараВMerExternalItemId = Истина;
		КонецЕсли;
	ИначеЕсли ПараметрыСоединения.Свойство("File") Тогда
		Если Найти(ПараметрыСоединения.File, "Buh_Mercury_3.0") > 0 Тогда
			Объект.КодТовараВMerExternalItemId = Истина;
		КонецЕсли;
	КонецЕсли;
	Объект.ТипВыгрузкиТовара = 1;
	
   // Инициализация набора констант
   //НаборЗаписей = ДанныеФормыВЗначение(РегистрСведенийСписок, Тип("РегистрСведенийНаборЗаписей.ДатыЗапретаИзменения"));
   //НаборЗаписей.Прочитать();
   //ЗначениеВДанныеФормы(НаборЗаписей, РегистрСведенийСписок);	
   НаборЗаписей = РеквизитФормыВЗначение("РегистрСведенийСписок");
   НаборЗаписей.Прочитать();
   ЗначениеВРеквизитФормы(НаборЗаписей, "РегистрСведенийСписок");	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//ПутьКМенеджеруОбмена = "\\mercury.ru\dfspublic$\ЦУМ\Exchange\SRybak1\МенеджерОбмена.epf";
    Если Найти(ПараметрЗапуска,"-exchange")>0 Тогда        
        Сообщить(ПараметрЗапуска); // Это то что делает обработка
		Объект.КонецПериода = КонецДня(ТекущаяДата());
		Объект.НачалоПериода = НачалоДня(ДобавитьМесяц(Объект.КонецПериода, -1));
		Для Каждого СтрокаТипов Из Объект.ТаблицаТиповДокументов Цикл
			Если СтрокаТипов.ТипДокумента = "Импорт" ИЛИ
				 СтрокаТипов.ТипДокумента = "Поступление" Тогда
				СтрокаТипов.Признак = Истина;
			Иначе
				СтрокаТипов.Признак = Ложь;
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьСписокДокументовНаСервере(Истина);
		Выгрузить(Неопределено);
		ПроверитьСоздатьМенеджерОбмена();
		ВыполнитьЗагрузку(Отказ);
        ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоздатьМенеджерОбмена()
	обФайлВыгрузки = Новый Файл(Объект.ФайлВыгрузки);
	ПутьКМенеджеруОбмена = обФайлВыгрузки.Путь + "МенеджерОбмена.epf";
	ФайлМенеджера = Новый Файл(ПутьКМенеджеруОбмена);
	КаталогОбмена = Новый Файл(ФайлМенеджера.Путь);
	Если Не КаталогОбмена.Существует() Тогда
		СоздатьКаталог(КаталогОбмена.ПолноеИмя);
	КонецЕсли;
	Если Не ФайлМенеджера.Существует() Тогда
		АдресФайла = ПолучитьМенеджерОбмена(ЭтаФорма.УникальныйИдентификатор);
		ПолучитьФайл(АдресФайла, ФайлМенеджера.ПолноеИмя, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьМенеджерОбмена(УникальныйИдентификатор)
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	Макет = ОбъектДляСервера.ПолучитьМакет("МенеджерОбмена");
	АдресФайла = ПоместитьВоВременноеХранилище(Макет, УникальныйИдентификатор);
	Возврат АдресФайла;
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьЗагрузку(Отказ)
	ОбменДанными = Справочники.СценарииОбменовДанными.НайтиПоКоду("00001");
	ОбменДаннымиСервер.ВыполнитьОбменДаннымиПоСценариюОбменаДанными(Отказ, ОбменДанными, 1);
	Возврат Не Отказ;
КонецФункции

&НаКлиенте
Функция ВыполнитьЗапросADO(Connection, CommandText)
	Cmd=Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = Connection;
	Cmd.CommandText = CommandText;
	Cmd.CommandTimeout = 0;		//120;
	Cmd.CommandType = 1; //ТипКомандыАДО("adCmdText");

	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	RecordSet = Cmd.Execute();
	Возврат RecordSet;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСписокДокументовНаСервере(ПропускатьЗагруженные = Ложь)
	
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	
	ОбъектДляСервера.ИдентификаторФормы = ЭтаФорма.УникальныйИдентификатор;
	ВыгрузкаЗавершена = ОбъектДляСервера.ЗаполнитьСписокДокументов(ПропускатьЗагруженные);//ОбъектДляСервера.НачалоПериода, ОбъектДляСервера.КонецПериода);
	
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
	
	Возврат ВыгрузкаЗавершена;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокДокументов(Команда)
	ПропускатьЗагруженные = Ложь;
	Если Команда = Неопределено Тогда
		ПропускатьЗагруженные = Истина;
	КонецЕсли;
	ЗаполнитьСписокДокументовНаСервере(ПропускатьЗагруженные);
КонецПроцедуры

&НаКлиенте
Процедура ФайлВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	ДиалогВыбораФайла.Фильтр = "Файл данных (*.xml)|*.xml";
	ДиалогВыбораФайла.Заголовок = "Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.Расширение = "xml";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла = Элемент.ТекстРедактирования;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Ложь;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		Объект.ФайлВыгрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВыполнитьВыгрузкуНаСервере(АдресФайла)
	Если Не ПроверитьЗаполнение() ТОгда
		Возврат Ложь;
	КонецЕсли;
	
	ВременныйФайл = ПолучитьИмяВременногоФайла(".xml");
	Файл = Новый Файл(ВременныйФайл);
	ИмяФайлаВыгрузки = ВременныйФайл;
		
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	ОбъектДляСервера.ИдентификаторФормы = ЭтаФорма.УникальныйИдентификатор;
	ВыгрузкаЗавершена = ОбъектДляСервера.ВыполнитьВыгрузку(ИмяФайлаВыгрузки);
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
	
	АдресФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаВыгрузки), ЭтаФорма.УникальныйИдентификатор);
	УдалитьФайлы(ИмяФайлаВыгрузки);
	
	Если Не ВыгрузкаЗавершена Тогда
		
		Сообщить("Ошибка создания файла.");
		
	КонецЕсли;
	
	Возврат ВыгрузкаЗавершена;
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	Перем АдресФайла;
	
	ОчиститьСообщения();
	ПроверитьСоздатьМенеджерОбмена();
	Состояние(Нстр("ru='Выполняется выгрузка документов. Пожалуйста, подождите...'"));
	Попытка
		Если ВыполнитьВыгрузкуНаСервере(АдресФайла) Тогда
			
			Сообщить("Выгрузка документов успешно завершена.");
			
			ПолучитьФайл(АдресФайла, Объект.ФайлВыгрузки, Ложь);
		КонецЕсли;
	Исключение
		Сообщить("Произошла ошибка: " + ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьОстаткиНаСервере()
	
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	
	ВыгрузкаЗавершена = ОбъектДляСервера.ЗаполнитьОстатки(Объект.КонецПериода);
	
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
	
	Возврат ВыгрузкаЗавершена;
КонецФункции

&НаКлиенте
Процедура КомандаЗаполнитьОстатки(Команда)
	ЗаполнитьОстаткиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОстатки1(Команда)
	
	ОчиститьСообщения();
	
	// Переключаем режим - страницу.
	ТекстСостоянияЗагрузки = НСтр("ru = 'Загрузка остатков...'");
	
	ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессВыполнения", ЭтотОбъект);
	Задание = ВыгрузитьОстаткиНаСервере1();
	
	Если Задание <> Неопределено Тогда
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		НастройкиОжидания.ПолучатьРезультат = Истина;
		НастройкиОжидания.ВыводитьСообщения = Ложь;
		НастройкиОжидания.Интервал = 1;
		НастройкиОжидания.ОповещениеОПрогрессеВыполнения = ОповещениеОПрогрессеВыполнения;
		//НастройкиОжидания.ОповещениеПользователя.Показать = Истина;
		
		Обработчик = Новый ОписаниеОповещения("ПослеФоновойВыгрузкиОстатков", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Задание, Обработчик, НастройкиОжидания);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВыгрузитьОстаткиНаСервере1()
	// Возможно, что фоновое задание было запущено раньше, 
	// пользователь дал команду его отменить, однако задание не отменено.
	// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
	// Мы можем отследить ситуацию только, если все это происходит в одной форме.
	// Потому что подсистема ДлительныеОперации не умеет устанавливать ключ фонового задания.
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НачалоПериода", ОбработкаОбъект.НачалоПериода);
	СтруктураПараметров.Вставить("ИдентификаторФормы", ЭтаФорма.УникальныйИдентификатор);
	СтруктураПараметров.Вставить("ИмяФормы", ЭтаФорма.ИмяФормы);
	//СтруктураПараметров.Вставить("ОбработкаОбъект", ОбработкаОбъект);
	
	Если ПодсистемаСуществует("СтандартныеПодсистемы.БазоваяФункциональность") Тогда
		
		Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			Попытка
				ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
			Исключение
				ЗаданиеВыполнено = Истина;
			КонецПопытки;
		Иначе
			ЗаданиеВыполнено = Истина;
		КонецЕсли;
		Если ЗаданиеВыполнено = Ложь Тогда
			// Надо ждать
			Возврат Неопределено;
		КонецЕсли;
		
		НаименованиеЗадания = НСтр("ru = 'Выгрузка остатков'");
		
		ВыполняемыйМетод = "ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки";
		
		ЭтоВнешняяОбработка = Не Метаданные.Обработки.Содержит(ОбработкаОбъект.Метаданные());
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("ИмяОбработки", ОбработкаОбъект.ИспользуемоеИмяФайла);
		ПараметрыЗадания.Вставить("ИмяМетода", "ВыгрузитьОстатки1");
		ПараметрыЗадания.Вставить("ПараметрыВыполнения", СтруктураПараметров);
		ПараметрыЗадания.Вставить("ЭтоВнешняяОбработка", ЭтоВнешняяОбработка);
		ПараметрыЗадания.Вставить("ДополнительнаяОбработкаСсылка", Неопределено);
		
		МодульДлительныеОперации = ОбщийМодуль("ДлительныеОперации");
		
		ПараметрыВыполнения = МодульДлительныеОперации.ПараметрыВыполненияВФоне(ЭтаФорма.УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		
		РезультатФоновогоЗадания = МодульДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыЗадания, ПараметрыВыполнения);
		ИдентификаторЗадания = РезультатФоновогоЗадания.ИдентификаторЗадания;
		Возврат РезультатФоновогоЗадания;
	Иначе
		АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, ЭтаФорма.УникальныйИдентификатор);
		ОбработкаОбъект.ВыгрузитьОстатки(СтруктураПараметров, АдресРезультата);
		ЗавершениеЗагрузки(АдресРезультата);
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПрогрессВыполнения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Статус = "Выполняется" Тогда
		РезультатЗадания = ПрочитатьПрогрессИСообщения(Результат.ИдентификаторЗадания);
		Если РезультатЗадания.Прогресс <> Неопределено Тогда
			Состояние("Обработка данных", РезультатЗадания.Прогресс.Процент, РезультатЗадания.Прогресс.Текст);
		КонецЕсли;
		Если РезультатЗадания.Сообщения <> Неопределено Тогда
			Для Каждого Сообщение Из РезультатЗадания.Сообщения Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение.Текст, Сообщение.КлючДанных, Сообщение.Поле, Сообщение.ПутьКДанным);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьПрогрессИСообщения(ИдентификаторЗадания)
	Возврат ДлительныеОперации.ОперацияВыполнена(ИдентификаторЗадания, Истина, Истина, Истина);
КонецФункции

&НаКлиенте
Процедура ПослеФоновойВыгрузкиОстатков(Задание, ДополнительныеПараметры) Экспорт

	Если Задание.Статус = "Ошибка" Тогда
		ТекстОшибки = ТекстОшибки + Задание.КраткоеПредставлениеОшибки;
		ВывестиСообщениеОбОшибке(ТекстОшибки);
	ИначеЕсли Задание.Статус = "Выполнено" Тогда
		РезультатЗадания = ПрочитатьПрогрессИСообщения(ИдентификаторЗадания);
		Если РезультатЗадания.Сообщения <> Неопределено Тогда
			Для Каждого Сообщение Из РезультатЗадания.Сообщения Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение.Текст, Сообщение.КлючДанных, Сообщение.Поле, Сообщение.ПутьКДанным);
			КонецЦикла;
		КонецЕсли;
		Состояние("Обработка завершена");
		ЗавершениеЗагрузки(Задание.АдресРезультата);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщениеОбОшибке(Знач ТекстОшибки)
	ОчиститьСообщения();
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
КонецПроцедуры

&НаСервере
Функция ЗавершениеЗагрузки(АдресРезультата)
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	УдалитьИзВременногоХранилища(АдресРезультата);
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ТаблицаОстатков.Загрузить(Результат.ТабОстатков.Получить());
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	Возврат Истина;

КонецФункции

// Возвращает Истина, если подсистема существует.
//
// Параметры:
//  ПолноеИмяПодсистемы - Строка. Полное имя объекта метаданных подсистема без слов "Подсистема.".
//                        Например: "СтандартныеПодсистемы.БазоваяФункциональность".
//
// Пример вызова необязательной подсистемы:
//
//  Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
//  	МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
//  	МодульУправлениеДоступом.<Имя метода>();
//  КонецЕсли;
//
// Возвращаемое значение:
//  Булево.
//
&НаСервере
Функция ПодсистемаСуществует(ПолноеИмяПодсистемы)
	
	Если Не ВерсияБСПСоответствуетТребованиям() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИменаПодсистем = ИменаПодсистем();
	Возврат ИменаПодсистем.Получить(ПолноеИмяПодсистемы) <> Неопределено;
	
КонецФункции

// Возвращает соответствие имен подсистем и значения Истина;
&НаСервереБезКонтекста
Функция ИменаПодсистем()
	
	Возврат Новый ФиксированноеСоответствие(ИменаПодчиненныхПодсистем(Метаданные));
	
КонецФункции

&НаСервереБезКонтекста
Функция ИменаПодчиненныхПодсистем(РодительскаяПодсистема)
	
	Имена = Новый Соответствие;
	
	Для Каждого ТекущаяПодсистема Из РодительскаяПодсистема.Подсистемы Цикл
		
		Имена.Вставить(ТекущаяПодсистема.Имя, Истина);
		ИменаПодчиненных = ИменаПодчиненныхПодсистем(ТекущаяПодсистема);
		
		Для каждого ИмяПодчиненной Из ИменаПодчиненных Цикл
			Имена.Вставить(ТекущаяПодсистема.Имя + "." + ИмяПодчиненной.Ключ, Истина);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Имена;
	
КонецФункции

&НаСервере
Функция ВерсияБСПСоответствуетТребованиям()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.ВерсияБСПСоответствуетТребованиям();
КонецФункции

// Возвращает ссылку на общий модуль по имени.
//
// Параметры:
//  Имя          - Строка - имя общего модуля, например:
//                 "ОбщегоНазначения",
//                 "ОбщегоНазначенияКлиент".
//
// Возвращаемое значение:
//  ОбщийМодуль.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОбщийМодуль(Имя)
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
		Модуль = Вычислить(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru = 'Общий модуль ""%1"" не найден.'"), Имя);
	КонецЕсли;
#Иначе
	Модуль = Вычислить(Имя);
#Если НЕ ВебКлиент Тогда
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru = 'Общий модуль ""%1"" не найден.'"), Имя);
	КонецЕсли;
#КонецЕсли
#КонецЕсли
	
	Возврат Модуль;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено)
	
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
	
	Возврат СтрокаПодстановки;
КонецФункции

&НаСервере
Функция ВыгрузитьОстаткиНаСервере()
		
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	ВыгрузкаЗавершена = ОбъектДляСервера.ВыгрузитьОстатки();
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
	
	Возврат ВыгрузкаЗавершена;
КонецФункции

&НаКлиенте
Процедура ВыгрузитьОстатки(Команда)
	Состояние(Нстр("ru='Выполняется выгрузка остатков. Пожалуйста, подождите...'"));
	ВыгрузитьОстаткиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ФайлXLSНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр = "Файл данных (*.xls)|*.xls";
	ДиалогВыбораФайла.Заголовок = "Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.Расширение = "xls";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла = Элемент.ТекстРедактирования;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		Объект.ФайлXLS = ДиалогВыбораФайла.ПолноеИмяФайла;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗагрузитьXLSНаСервере(МассивXLS)
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	ТаблицаXLS = ПреобразоватьМассивВТаблицуЗначений(МассивXLS);
	Если Объект.ТипДокументаПоУмолчанию = "Заморозки" Тогда
		ВыгрузкаЗавершена = ОбъектДляСервера.ЗагрузитьТаблицуЗаморозок(ТаблицаXLS);
	ИначеЕсли Объект.ТипДокументаПоУмолчанию = "ПостВнешнее" ИЛИ
			  Объект.ТипДокументаПоУмолчанию = "РеалВнешняя" Тогда
		ВыгрузкаЗавершена = ОбъектДляСервера.ЗагрузитьТаблицуВнешнихПродаж(ТаблицаXLS);
	ИначеЕсли Объект.ТипДокументаПоУмолчанию = "Замены" Тогда
		ВыгрузкаЗавершена = ОбъектДляСервера.ЗагрузитьТаблицуЗамен(ТаблицаXLS);
		//ВыгрузкаЗавершена = ОбъектДляСервера.ЗагрузитьТаблицуЗаменВПоступлениях(ТаблицаXLS);
	КонецЕсли;
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
КонецФункции

&НаКлиенте
Процедура ЗагрузитьXLS(Команда)
	Перем КолСтрок;
	МассивXLS = ЗагрузитьМетодом_MSADODB(Объект.ФайлXLS, "TDSheet", 1, 0, , КолСтрок);
	ЗагрузитьXLSНаСервере(МассивXLS);
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьМетодом_MSADODB(Знач ФайлEXCEL, Знач ИмяЛиста, Знач СтрокаЗаголовка = 1, НачСтрока = 0, КонСтрока = 0, КолвоСтрокExcel, 
 Знач ПодключениеADODB = "MicrosoftACEOLEDB12") Экспорт
    Перем СonnectionString, ADODBConnection, ADODBRecordset, ТекстЗапроса;
    Перем КолвоКолонокExcel, Поле, Колонка, ИмяКолонки;
    Перем НоваяСтрока, НомерСтроки;
    Перем ТаблицаРезультат;
	adSchemaTables = 20;
	adSchemaColumns = 4;	 
    
    // Нумерация MS ADODB начинается с 1.
    
    // Переменная "СтрокаЗаголовка", не используется, т.к. HDR=YES, а не HDR=NO.
    // HDR=YES:
    // 1. Считывание заголовков колонок с 1-ой строки.
    // 2. Считываемые данные со 2-ой и последующих строк типизированы. Для варианта HDR=NO: считываемые данные - строка.
    
    // Строка соединения - определение драйвера, который будет использован для подключения к файлу EXCEL.
    Если ПодключениеADODB = "MicrosoftACEOLEDB12" Тогда
        
        // ACE.OLEDB.12.0 - Для использования данного подключения необходимо дополнительное ПО:
        // Microsoft Access Database Engine 2010 Redistributable 32/64 bit.
        СonnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source= " + СокрЛП(ФайлEXCEL) + ";Extended Properties=""Excel 12.0;HDR=YES;IMEX=1;""";
        
        // Еще один вариант.
        //СтрокаСоединения = "Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};Dbq=" + СокрЛП(ФайлEXCEL) + ";";
        
    Иначе
        
        // Jet.OLEDB.4.0 - Стандартное подключение, как правило, не требующее установки дополнительного ПО. 
        // Рекомендуется установить последний Service Pack Windows.
        СonnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source= "  + СокрЛП(ФайлEXCEL) + ";Extended Properties=""Excel 8.0;HDR=YES;IMEX=1;""";
        
        // Еще один вариант.
        //СтрокаСоединения = "Driver={Microsoft Excel Driver (*.xls)};Dbq=" + СокрЛП(ФайлEXCEL) + ";";
        
    КонецЕсли;
    
	//Попытка
        // Инициализация основного объекта ADODB.Connection. Открытие соединения.
        ADODBConnection = Новый COMОбъект("ADODB.Connection");
        ADODBConnection.ConnectionString =  СonnectionString;
        ADODBConnection.Open();
        // Импирически определенный параметр для правильного определения количества строк листа.
        ADODBConnection.CursorLocation = 3;    // По-умолчанию 2.
	//Исключение
	//    Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	//    Возврат Новый Массив;    // В случае ошибки возвращаем пустую таблицу значений.
	//КонецПопытки;
    
	Recordset = ADODBConnection.OpenSchema(adSchemaColumns);
	Если (Recordset.EOF = Ложь) Тогда
		ИмяЛиста = Recordset.Fields("table_name").Value;
	КонецЕсли;
	Recordset.Close();
    ТекстЗапроса = "SELECT * FROM [" + ИмяЛиста + "]";
    // Создание Recordset. Дочерний объект ADODBConnection. Набор записей по запросу.
	//Попытка
        ADODBRecordset = Новый COMОбъект("ADODB.Recordset");
        ADODBRecordset.Open(ТекстЗапроса, ADODBConnection);
        
        // Проверка заполненности листа.
        Если (ADODBRecordset.EOF ИЛИ ADODBRecordset.BOF) Тогда
            КолвоСтрокExcel = 0;
            Сообщить(НСтр("ru = '" + ИмяЛиста + ": не содержит данных.'"), СтатусСообщения.Внимание);
            
            // Завершение работы.
            // Закрытие Объектов.
            ADODBRecordset.Close();
            ADODBConnection.Close();
            ADODBRecordset   = Неопределено;
            ADODBConnection = Неопределено;
            
            Возврат Новый Массив;    // В случае ошибки возвращаем пустую таблицу значений.
        КонецЕсли;
        
        // Импирически определенные параметры для правильного определения количества строк листа.
        ADODBRecordset.AbsolutePage     = 1;
        ADODBRecordset.AbsolutePosition = 1;
	//Исключение
	//    Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	//    Возврат Новый Массив;    // В случае ошибки возвращаем пустую таблицу значений.
	//КонецПопытки;
    
    // Параметр, возвращаемый в вызывающую процедуру.
    КолвоСтрокExcel = ADODBRecordset.RecordCount + 1;    // (+1) - учет Строки-Заголовока, которая "съедается".
    КолвоКолонокExcel = ADODBRecordset.Fields.Count;
    
    // Проверка заполненности листа.
     Если КолвоСтрокExcel <= 1 Тогда
        КолвоСтрокExcel = 0;
        Сообщить(НСтр("ru = '" + ИмяЛиста + ": не содержит данных.'"), СтатусСообщения.Внимание);
        
        // Завершение работы.
        // Закрытие Объектов.
        ADODBRecordset.Close();
        ADODBConnection.Close();
        ADODBRecordset   = Неопределено;
        ADODBConnection = Неопределено;
        
        Возврат Новый Массив;    // В случае ошибки возвращаем пустую таблицу значений.
    КонецЕсли;
    
    // Создание результирующей таблицы, в которую будут записываться считанные из EXCEL данные.
    ТаблицаРезультат = Новый Массив;
    
    // Формирование колонок результирующей таблицы.
    
    // "НомерСтроки" - для наглядности и удобства.
    // В зависимости от разрабатываемой обработки.
    // "Сопоставлено" - может быть другим.
    // Здесь же могут быть добавлены другие колонки, не формируемые из содержимого файла EXCEL.
	СтруктураСтроки = Новый Структура ("НомерСтроки, Сопоставлено");
	//ТаблицаРезультат.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "№", 4);
	//ТаблицаРезультат.Колонки.Добавить("Сопоставлено", Новый ОписаниеТипов("Булево"), "Сопоставлено", 1);
    Для ит = 1 ПО КолвоКолонокExcel Цикл
        
        Поле = ADODBRecordset.Fields.Item(ит - 1);
        ИмяКолонки = "К_" + ит;
		СтруктураСтроки.Вставить(ИмяКолонки);
        //Колонка = ТаблицаРезультат.Колонки.Добавить(ИмяКолонки, , СокрЛП(СтрЗаменить(Поле.Name, "#", ".")));
        // Замена "#" на ".", т.к. при считывании ADODB "." в имени колонки заменяется на "#".
        
	КонецЦикла;
	СтруктураСтроки = Новый ФиксированнаяСтруктура(СтруктураСтроки);
    
    // ТаблицаРезультат: 1-я строка - Строка-Заголовок.
    
    // Добавление этой строки обусловлено исключительно из соображений идентичности содержимого файла EXCEL и ТаблицыЗначений,
    // выводимой на форме Обработки, и дальнейшей обработки строки заголовка
    // с целью сопоставления колонок EXCEL и реквизитов 1С: для Справочников, ПВХ, Регистров, Документов.
    
    // Если в Вашей обработке в результирующей таблице в качестве 1-ой строки не нужна Строка-Заголовок, то
    // следует закомментировать следующий цикл:
	//НоваяСтрока = Новый Структура(СтруктураСтроки);
	//НоваяСтрока.НомерСтроки = 1;
	//Для ит = 1 ПО КолвоКолонокExcel Цикл
	//    
	//    ИмяКолонки = "К_" + ит;
	//    Колонка = ТаблицаРезультат.Колонки.Найти(ИмяКолонки);
	//    НоваяСтрока[ИмяКолонки] = Колонка.Заголовок;
	//    
	//КонецЦикла;
	//ТаблицаРезультат.Добавить(НоваяСтрока);
    
    // ТаблицаРезультат: Формирование строк по указанному диапазону: НачСтрока - КонСтрока.
    
    НомерСтроки = 1;
    Пока ADODBRecordset.EOF() = 0 Цикл
        
        НомерСтроки = НомерСтроки + 1;
        
        Если НомерСтроки < НачСтрока Тогда    // Номер строки вне диапазона считываемых строк.
            ADODBRecordset.MoveNext();             // Следующая строка.
            Продолжить;
        КонецЕсли;
        
        Если КонСтрока > 0 И НомерСтроки > КонСтрока Тогда    // Номер строки вне диапазона считываемых строк.
            Прервать;
        КонецЕсли;
        НоваяСтрока = Новый Структура(СтруктураСтроки);
        НоваяСтрока.НомерСтроки = НомерСтроки;
        
        Для ит = 1 ПО КолвоКолонокExcel Цикл
            
            Поле = ADODBRecordset.Fields.Item(ит - 1);
                
            Если Поле.ActualSize = 0 Тогда        // Пустое поле EXCEL.
                Продолжить;
            КонецЕсли;
                
            ЗначениеЯчейки = Поле.Value;        // Учитывая параметр HDR=YES в строке соединения, данные считываются в соответствии с их типом.
            
            ИмяКолонки = "К_" + ит;
            НоваяСтрока[ИмяКолонки] = ЗначениеЯчейки;
            
            // Используется при формировании таблицы на форме обработки.
			//ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
			//ДлинаСтроки      = СтрДлина(СокрЛП(ЗначениеЯчейки));
			//ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
                
        КонецЦикла;
        ТаблицаРезультат.Добавить(НоваяСтрока);
        
        ADODBRecordset.MoveNext();   // Следующая строка.
        
    КонецЦикла;
    
    //УдалитьКолонкиСНулевойШириной(ТаблицаРезультат);
    
    // Завершение работы.
    // Закрытие Объектов.
    ADODBRecordset.Close();
    ADODBConnection.Close();
    ADODBRecordset   = Неопределено;
    ADODBConnection = Неопределено;
    
    Возврат ТаблицаРезультат;
    
КонецФункции

// Функция преобразует Массив из структур в ТаблицуЗначений.
//
&НаСервере
Функция ПреобразоватьМассивВТаблицуЗначений(мсДанные) Экспорт
    
    тзДанные = Новый ТаблицаЗначений;
    
    Для Каждого ЭлементМассива Из мсДанные Цикл
        // Рисуем колонки для таблицы
        Если тзДанные.Колонки.Количество() = 0 Тогда
            Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
                тзДанные.Колонки.Добавить(ЗначениеСтруктуры.Ключ);
            КонецЦикла;
        КонецЕсли;
        
        // Добавляем данные в таблицу
        НоваяСтрока = тзДанные.Добавить();
        Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
            НоваяСтрока[ЗначениеСтруктуры.Ключ] = ЗначениеСтруктуры.Значение;
        КонецЦикла;
    КонецЦикла;
    
    Возврат тзДанные;
    
КонецФункции // ПреобразоватьМассивВТаблицуЗначений()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СтруктураТипов = Новый Структура;
	Для Каждого СтрокаТЧ Из Объект.ТаблицаТиповДокументов Цикл
		СтруктураТипов.Вставить(СтрокаТЧ.ТипДокумента, СтрокаТЧ.Признак);
	КонецЦикла;
	Объект.РекТаблицаТиповДокументов = СтруктураТипов;
	Объект.ТаблицаЗакупокXLS.Очистить();
	Объект.ТаблицаОстатков.Очистить();
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	РекТаблицаТиповДокументов = Настройки.Получить("Объект.РекТаблицаТиповДокументов");
	Если ЗначениеЗаполнено(РекТаблицаТиповДокументов) Тогда
		Если ТипЗнч(РекТаблицаТиповДокументов) = Тип("ХранилищеЗначения") Тогда
			ТаблицаТиповДокументов = РекТаблицаТиповДокументов.Получить();
			СтруктураПоиска = Новый Структура("ТипДокумента");
			Для Каждого СтрокаТЧ Из ТаблицаТиповДокументов Цикл
				СтруктураПоиска.ТипДокумента = СтрокаТЧ.ТипДокумента;
				Строки = Объект.ТаблицаТиповДокументов.НайтиСтроки(СтруктураПоиска);
				Если Строки.Количество() > 0 Тогда
					Строки[0].Признак = СтрокаТЧ.Признак;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(РекТаблицаТиповДокументов) = Тип("Структура") Тогда
			Для Каждого Элемент Из РекТаблицаТиповДокументов Цикл
				Строки = Объект.ТаблицаТиповДокументов.НайтиСтроки(Новый Структура("ТипДокумента", Элемент.Ключ));
				Если Строки.Количество() > 0 Тогда
					Строки[0].Признак = Элемент.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьОтрОстаткиВсегоНаСервере()
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	
	ВыгрузкаЗавершена = ОбъектДляСервера.ЗаполнитьОтрицательныеОстаткиВсего();
	
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
	
	Возврат ВыгрузкаЗавершена;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьОтрОстаткиВсего(Команда)
	ЗаполнитьОтрОстаткиВсегоНаСервере();
КонецПроцедуры

&НаСервере
Функция ВыгрОстРеалПост(ВыгружатьРеализацию, ВыгружатьПоступление, ДатаДокумента = Неопределено)
		
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	ВыгрузкаЗавершена = ОбъектДляСервера.ВыгрузитьОстаткиКакРеалПост(ВыгружатьРеализацию, ВыгружатьПоступление, ДатаДокумента);
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
	
	Возврат ВыгрузкаЗавершена;
КонецФункции

&НаКлиенте
Процедура ВыгрОстПоступлением(Команда)
	Состояние(Нстр("ru='Выполняется выгрузка документов. Пожалуйста, подождите...'"));
	Если ВыгрОстРеалПост(Ложь, Истина, ?(Объект.КодТовараВMerExternalItemId, Объект.НачалоПериода, Неопределено)) Тогда
		
		//Сообщить("Выгрузка документов успешно завершена.");
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрОстРеализацией(Команда)
	Состояние(Нстр("ru='Выполняется выгрузка документов. Пожалуйста, подождите...'"));
	Если ВыгрОстРеалПост(Истина, Ложь) Тогда
		
		//Сообщить("Выгрузка документов успешно завершена.");
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
// Преобразует текст формата XML в таблицу значений,
// при этом колонки таблицы формируются на основе описания в XML.
//
// Параметры:
//  XML     - текст в формате XML или ЧтениеXML.
//
// Схема XML:
// <?xml version="1.0" encoding="utf-8"?>
//  <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
//   <xs:element name="Items">
//    <xs:complexType>
//     <xs:sequence>
//      <xs:element maxOccurs="unbounded" name="Item">
//       <xs:complexType>
//        <xs:attribute name="Code" type="xs:integer" use="required" />
//        <xs:attribute name="Name" type="xs:string" use="required" />
//        <xs:attribute name="Socr" type="xs:string" use="required" />
//        <xs:attribute name="Index" type="xs:string" use="required" />
//       </xs:complexType>
//      </xs:element>
//     </xs:sequence>
//    <xs:attribute name="Description" type="xs:string" use="required" />
//    <xs:attribute name="Columns" type="xs:string" use="required" />
//   </xs:complexType>
//  </xs:element>
// </xs:schema>
//
// Примеры XML-файлов см. в демонстрационной конфигурации.
// 
// Пример использования:
//   КлассификаторТаблица = ПрочитатьXMLВТаблицу(
//     Справочники.Валюты.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст()).Данные;
//
// Возвращаемое значение:
//  Структура - с полями 
//    * ИмяТаблицы - Строка
//    * Данные - ТаблицаЗначений.
//
Функция ПрочитатьXMLВТаблицу(Знач XML) Экспорт
	
	Если ТипЗнч(XML) <> Тип("ЧтениеXML") Тогда
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(XML);
	Иначе
		Чтение = XML;
	КонецЕсли;
	
	// Прочитаем первый узел и проверим его.
	Если Не Чтение.Прочитать() Тогда
		ВызватьИсключение НСтр("ru = 'Пустой XML'");
	ИначеЕсли Чтение.Имя <> "Items" Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка в структуре XML'");
	КонецЕсли;
	
	// Получим описание таблицы и создадим ее.
	ИмяТаблицы = Чтение.ПолучитьАтрибут("Description");
	ИменаКолонок = СтрЗаменить(Чтение.ПолучитьАтрибут("Columns"), ",", Символы.ПС);
	Колонок = СтрЧислоСтрок(ИменаКолонок);
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	Для Сч = 1 По Колонок Цикл
		ТаблицаЗначений.Колонки.Добавить(СтрПолучитьСтроку(ИменаКолонок, Сч), Новый ОписаниеТипов("Строка"));
	КонецЦикла;
	
	// Заполним значения в таблице.
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "Items" Тогда
			Прервать;
		ИначеЕсли Чтение.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		ИначеЕсли Чтение.Имя <> "Item" Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка в структуре XML'");
		КонецЕсли;
		
		новСтр = ТаблицаЗначений.Добавить();
		Для Сч = 1 По Колонок Цикл
			ИмяКолонки = СтрПолучитьСтроку(ИменаКолонок, Сч);
			новСтр[Сч-1] = Чтение.ПолучитьАтрибут(ИмяКолонки);
		КонецЦикла;
		
	КонецЦикла;
	
	// Заполним результат
	Результат = Новый Структура;
	Результат.Вставить("ИмяТаблицы", ИмяТаблицы);
	Результат.Вставить("Данные", ТаблицаЗначений);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьТаб(Команда)
	Объект.ТаблицаЗакупокXLS.Очистить();
КонецПроцедуры

&НаСервере
Функция ЗагрузитьZXLSНаСервере(МассивXLS)
	Перем ТаблицаXLS;
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	Если МассивXLS <> Неопределено Тогда
		ТаблицаXLS = ПреобразоватьМассивВТаблицуЗначений(МассивXLS);
	КонецЕсли;
	Попытка
		ВыгрузкаЗавершена = ОбъектДляСервера.ЗагрузитьТаблицуZОтчетов(ТаблицаXLS);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
КонецФункции

&НаКлиенте
Процедура ЗагрузитьZXLS(Команда)
	Перем КолСтрок, МассивXLS;
	Если ЗначениеЗаполнено(Объект.ФайлXLS) Тогда
		МассивXLS = ЗагрузитьМетодом_MSADODB(Объект.ФайлXLS, "TDSheet", 1, 0, , КолСтрок);
	КонецЕсли;
	ЗагрузитьZXLSНаСервере(МассивXLS);
КонецПроцедуры

&НаКлиенте
Процедура ZОтчетыXLSПриАктивизацииСтроки(Элемент)
	
    Данные = Элементы.ZОтчетыXLS.ТекущиеДанные;
	Если Данные = Неопределено Тогда
		Если Элементы.ТаблицаЧеков.ОтборСтрок <> Неопределено Тогда
		    Элементы.ТаблицаЧеков.ОтборСтрок = Неопределено;
		КонецЕсли;
	Иначе
		ФиксированныйОтбор = Новый ФиксированнаяСтруктура("IdLocation, DOC_DATE",Данные.КодМагазина, Данные.Дата);
		Элементы.ТаблицаЧеков.ОтборСтрок = ФиксированныйОтбор;
	КонецЕсли;

	//НомерРаздела = Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1;

	//Элементы.Разделы.ТекущаяСтрока = Объект.Разделы[НомерРаздела - 1].ПолучитьИдентификатор();
КонецПроцедуры

&НаСервере
Функция ЗаполнитьОтрОстаткиПоДнямНаСервере()
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	
	ВыгрузкаЗавершена = ОбъектДляСервера.ЗаполнитьОтрицательныеОстаткиПоПериоду("День");
	
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
	
	Возврат ВыгрузкаЗавершена;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьОтрОстаткиПоДням(Команда)
	ЗаполнитьОтрОстаткиПоДнямНаСервере();
КонецПроцедуры

&НаСервере
Функция ЗаполнитьОстаткиПоступлениямиНаСервере()
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	
	ВыгрузкаЗавершена = ОбъектДляСервера.ЗаполнитьПоступлениями();
	
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
	
	Возврат ВыгрузкаЗавершена;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьОстаткиПоступлениями(Команда)
	ЗаполнитьОстаткиПоступлениямиНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиНеиспользуемыеТоварыНаСервере()
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СпрНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатуры
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТабДок.Номенклатура КАК Номенклатура
	|	ИЗ
	|		Документ.ОприходованиеТоваров КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров.Товары КАК ТабДок
	|		ПО Док.Ссылка = ТабДок.Ссылка
	|	ОБЪЕДИНИТЬ
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТабДок.Номенклатура КАК Номенклатура
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ТабДок
	|		ПО Док.Ссылка = ТабДок.Ссылка
	|	ОБЪЕДИНИТЬ
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТабДок.Номенклатура КАК Номенклатура
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ТабДок
	|		ПО Док.Ссылка = ТабДок.Ссылка
	|	ОБЪЕДИНИТЬ
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТабДок.Номенклатура КАК Номенклатура
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Услуги КАК ТабДок
	|		ПО Док.Ссылка = ТабДок.Ссылка
	|	ОБЪЕДИНИТЬ
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТабДок.Номенклатура КАК Номенклатура
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК ТабДок
	|		ПО Док.Ссылка = ТабДок.Ссылка
	|	ОБЪЕДИНИТЬ
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТабДок.Номенклатура КАК Номенклатура
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Товары КАК ТабДок
	|		ПО Док.Ссылка = ТабДок.Ссылка
	|	ОБЪЕДИНИТЬ
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТабДок.Номенклатура КАК Номенклатура
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.АгентскиеУслуги КАК ТабДок
	|		ПО Док.Ссылка = ТабДок.Ссылка
	|	ОБЪЕДИНИТЬ
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТабДок.Номенклатура КАК Номенклатура
	|	ИЗ
	|		Документ.ВозвратТоваровОтПокупателя КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ТабДок
	|		ПО Док.Ссылка = ТабДок.Ссылка
	|	) КАК ТоварыВДокументах
	|	ПО СпрНоменклатуры.Ссылка = ТоварыВДокументах.Номенклатура
	|ГДЕ
	|	СпрНоменклатуры.ПометкаУдаления = Ложь И
	|	СпрНоменклатуры.ЭтоГруппа = Ложь И
	|	ТоварыВДокументах.Номенклатура ЕСТЬ NULL");
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции
	
&НаСервереБезКонтекста
Функция НайтиНеиспользуемыеГруппыТоваровНаСервере()
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Группы.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Группы
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Номенклатура.Родитель КАК Родитель
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура
	|	ГДЕ
	|		Номенклатура.ЭтоГруппа = Ложь
	|	) КАК ЭлементыГрупп
	|	ПО Группы.Ссылка = ЭлементыГрупп.Родитель
	|ГДЕ
	|	Группы.ЭтоГруппа = ИСТИНА И
	|	Группы.ПометкаУдаления = Ложь И
	|	ЭлементыГрупп.Родитель ЕСТЬ NULL");
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

&НаСервереБезКонтекста
Функция УстановитьПометкуУдаленияПоМассиву(Массив)
	Сообщение = "";
	Для Каждого ЭлементМассива Из Массив Цикл
		Попытка
			ОбъектСправочника = ЭлементМассива.ПолучитьОбъект();
			ОбъектСправочника.ОбменДанными.Загрузка = Истина;
			ОбъектСправочника.УстановитьПометкуУдаления(Истина);
		Исключение
			Сообщение = Сообщение + Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;
	Возврат Сообщение;
КонецФункции

&НаКлиенте
Процедура НайтиНеиспользуемыеТовары(Команда)
	//ИсходныйМассив = НайтиНеиспользуемыеТоварыНаСервере();
	//УстановитьПометкуУдаленияПоМассивуКлиент(ИсходныйМассив);
	ИсходныйМассив = НайтиНеиспользуемыеГруппыТоваровНаСервере();
	УстановитьПометкуУдаленияПоМассивуКлиент(ИсходныйМассив);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаленияПоМассивуКлиент(ИсходныйМассив)
	Поз = 0;
	РазделенныйМассив = РазделитьМассивНаПодмассивы(ИсходныйМассив);
	Количество = РазделенныйМассив.Количество();
	Объект.ПроцентВыполнения = (1000 * Поз)/Количество;
	ЭтаФорма.ОбновитьОтображениеДанных(ЭтаФорма.Элементы.ПроцентВыполнения);
	Для Каждого Массив Из РазделенныйМассив Цикл
		Сообщение = УстановитьПометкуУдаленияПоМассиву(Массив);
		Если Не ПустаяСтрока(Сообщение) Тогда
			Сообщить(Сообщение);
		КонецЕсли;
		Поз = Поз + 1;
		Объект.ПроцентВыполнения = (1000 * Поз)/Количество;
		ЭтаФорма.ОбновитьОтображениеДанных(ЭтаФорма.Элементы.ПроцентВыполнения);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция РазделитьМассивНаПодмассивы(ВходящийМассив, КоличествоПодмассивов = 1000)
	КоличествоЭлементовВсего = ВходящийМассив.Количество();
	ЭлементовЗаПроход = Цел(КоличествоЭлементовВсего / КоличествоПодмассивов);
	ОстатокЭлементов = КоличествоЭлементовВсего - (ЭлементовЗаПроход * КоличествоПодмассивов);
	ОстЭлНаПодм = ОстатокЭлементов / КоличествоПодмассивов;
	МассивРезультат = Новый Массив;
	ПозИсхМассива = 0;
	ОстКорректОкруг = 0;
	Для i = 1 По КоличествоПодмассивов Цикл
		Подмассив = Новый Массив;
		Для j = 1 По ЭлементовЗаПроход Цикл
			Подмассив.Добавить(ВходящийМассив[ПозИсхМассива]);
			ПозИсхМассива = ПозИсхМассива + 1;
		КонецЦикла;
		ОстКорректОкруг = ОстКорректОкруг + ОстЭлНаПодм;
		КоррКол = Цел(ОстКорректОкруг);
		Для j = 1 По КоррКол Цикл
			Подмассив.Добавить(ВходящийМассив[ПозИсхМассива]);
			ПозИсхМассива = ПозИсхМассива + 1;
		КонецЦикла;
		ОстКорректОкруг = ОстКорректОкруг - КоррКол;
		МассивРезультат.Добавить(Подмассив);
	КонецЦикла;
	Пока ПозИсхМассива < КоличествоЭлементовВсего - 1 Цикл
		МассивРезультат[КоличествоПодмассивов - 1].Добавить(ВходящийМассив[ПозИсхМассива]);
		ПозИсхМассива = ПозИсхМассива + 1;
	КонецЦикла;
	Возврат МассивРезультат;
КонецФункции

&НаКлиенте
Процедура ТаблицаСуммДокументовПриАктивизацииСтроки(Элемент)
    Данные = Элемент.ТекущиеДанные;
	Если Данные = Неопределено Тогда
		Если Элементы.ТаблицаЗакупокXLS1.ОтборСтрок <> Неопределено Тогда
		    Элементы.ТаблицаЗакупокXLS1.ОтборСтрок = Неопределено;
		КонецЕсли;
	Иначе
		//ФиксированныйОтбор = Новый ФиксированнаяСтруктура("НомерДокумента, ДатаДокумента",Данные.Номер, Данные.Дата);
		ФиксированныйОтбор = Новый ФиксированнаяСтруктура("ДокументСсылка",Данные.ДокументСсылка);
		НайденныеСтроки = Объект.ТаблицаЗакупокXLS.НайтиСтроки(Новый Структура(ФиксированныйОтбор));
		СуммаИтого = 0;
		Для Каждого СтрокаТаб Из НайденныеСтроки Цикл
			СуммаИтого = СуммаИтого + СтрокаТаб.Сумма;
		КонецЦикла;
		Элементы.ТаблицаЗакупокXLS1Сумма.ТекстПодвала = СуммаИтого;
		Если ПустаяСтрока(Данные.Номер) Тогда
			Элементы.ТаблицаЗакупокXLS1.ОтборСтрок = Неопределено;
		Иначе
			Элементы.ТаблицаЗакупокXLS1.ОтборСтрок = ФиксированныйОтбор;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПоступленияНаСервере(МассивXLS)
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	ТаблицаXLS = ПреобразоватьМассивВТаблицуЗначений(МассивXLS);
	ВыгрузкаЗавершена = ОбъектДляСервера.ЗагрузитьТаблицуВнешнихПоступлений(ТаблицаXLS);
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПоступления(Команда)
	Перем КолСтрок;
	МассивXLS = ЗагрузитьМетодом_MSADODB(Объект.ФайлXLS, "TDSheet", 1, 0, , КолСтрок);
	ЗагрузитьПоступленияНаСервере(МассивXLS);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСуммыПоступлений(Команда)
	Перем КолСтрок;
	МассивXLS = ЗагрузитьМетодом_MSADODB(Объект.ФайлXLS, "TDSheet", 1, 0, , КолСтрок);
	ЗагрузитьСуммыПоступленийНаСервере(МассивXLS);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСуммыПоступленийНаСервере(МассивXLS)
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	ТаблицаXLS = ПреобразоватьМассивВТаблицуЗначений(МассивXLS);
	Объект.ТипДокументаПоУмолчанию = "ПостВнешнее";
	ВыгрузкаЗавершена = ОбъектДляСервера.ЗагрузитьСуммыПоступлений(ТаблицаXLS);
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЧековDOC_DATEПриИзменении(Элемент)
	РасчетныйНомер = "ПР" + Лев(Элемент.Родитель.ТекущиеДанные.IdLocation, 3) + Формат(Элемент.Родитель.ТекущиеДанные.Doc_Date, "ДФ=yyMMdd");
	Если Элемент.Родитель.ТекущиеДанные.DOC_ID <> РасчетныйНомер Тогда
		Элемент.Родитель.ТекущиеДанные.DOC_ID = РасчетныйНомер;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РаспределитьПоступленияНаСервере()
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	ОбъектДляСервера.РаспределитьПоступления(-1);
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоступления(Команда)
	РаспределитьПоступленияНаСервере();
КонецПроцедуры

&НаСервере
Процедура РаспределитьПоступленияВозрНаСервере()
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	ОбъектДляСервера.РаспределитьПоступления(1);
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоступленияВозр(Команда)
	РаспределитьПоступленияВозрНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПоступленияИзДокументовНаСервере(МассивXLS)
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	
	ВыгрузкаЗавершена = ОбъектДляСервера.ЗаполнитьПоступленияИзДокументов(МассивXLS);
	
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПоступленияИзДокументов(Команда)
	Перем КолСтрок, МассивXLS;
	Если ЗначениеЗаполнено(Объект.ФайлXLS) Тогда
		МассивXLS = ЗагрузитьМетодом_MSADODB(Объект.ФайлXLS, "TDSheet", 1, 0, , КолСтрок);
	КонецЕсли;
	ЗагрузитьПоступленияИзДокументовНаСервере(МассивXLS);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСуммыЗаменНаСервере()
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	
	ВыгрузкаЗавершена = ОбъектДляСервера.ЗагрузитьСуммыЗамен();
	
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСуммыЗамен(Команда)
	ЗагрузитьСуммыЗаменНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстСобствТоварыНаСервереСтар1(Организация, НачалоПериода, КонецПериода)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РегистрДвижений.Регистратор,
	|	РегистрДвижений.НомерСтроки,
	|	РегистрДвижений.Субконто1 КАК Номенклатура,
	|	РегистрДвижений.КоличествоОборот,
	|	РегистрДвижений.СуммаОборот
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Запись,
	|			Счет = &СчетаУчета,
	|			&ВидыСубконто,
	|			Организация = &Организация И Субконто2 В (ВЫБРАТЬ
	|				Док.Ссылка
	|			ИЗ
	|				Документ.ПоступлениеТоваровУслуг КАК Док
	|			ГДЕ
	|				Док.Организация = &Организация
	|				И НЕ Док.Контрагент В (&Комитенты)
	|				И Док.Проведен = ИСТИНА
	|				),
	|			,
	|			) КАК РегистрДвижений
	|УПОРЯДОЧИТЬ ПО
	|	РегистрДвижений.Период,
	|	РегистрДвижений.Регистратор,
	|	РегистрДвижений.НомерСтроки
	|ИТОГИ ПО
	|	Регистратор");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("СчетаУчета", ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	//Запрос.УстановитьПараметр("СчетаУчета", ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Комитенты = Новый Массив;
	Комитенты.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("МЕРКУРИ КЛАССИК ООО"));
	Комитенты.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("Находченко"));
	//Комитенты.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("ИП Наурузова Р.К."));
	Запрос.УстановитьПараметр("Комитенты", Комитенты);
	ВыборкаДокументов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Регистратор");
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.Регистратор.ПолучитьОбъект();
		ВыборкаСтрок = ВыборкаДокументов.Выбрать();
		Пока ВыборкаСтрок.Следующий() Цикл
			СтрокаТЧ = ДокументОбъект.Товары[ВыборкаСтрок.НомерСтроки-1];
			Если СтрокаТЧ.Номенклатура = ВыборкаСтрок.Номенклатура Тогда
				СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
				//СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
				Если ТипЗнч(ВыборкаДокументов.Регистратор) = ТипЗнч(Документы.ПоступлениеТоваровУслуг.ПустаяСсылка()) Тогда
					СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
				ИначеЕсли ТипЗнч(ВыборкаДокументов.Регистратор) = ТипЗнч(Документы.РеализацияТоваровУслуг.ПустаяСсылка()) Тогда
					СтрокаТЧ.СчетДоходов = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
					СтрокаТЧ.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;
					СтрокаТЧ.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
				ИначеЕсли ТипЗнч(ВыборкаДокументов.Регистратор) = ТипЗнч(Документы.ОтчетОРозничныхПродажах.ПустаяСсылка()) Тогда
					СтрокаТЧ.СчетДоходов = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
					СтрокаТЧ.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;
					СтрокаТЧ.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
				Иначе
					Сообщить("Неизвестный тип документа! " + Строка(ВыборкаДокументов.Регистратор));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ДокументОбъект.Модифицированность() Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстСобствТоварыНаСервере(Организация, НачалоПериода, КонецПериода)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Док.Ссылка КАК Регистратор,
	|	Док.МоментВремени КАК МоментВремени,
	|	ТовДок.НомерСтроки,
	|	ТовДок.Номенклатура КАК Номенклатура,
	|	ТовДок.Количество КАК КоличествоОборот,
	|	ТовДок.Сумма КАК СуммаОборот
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК Док
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Товары КАК ТовДок
	|	ПО Док.Ссылка = ТовДок.Ссылка
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНом
	|	ПО ТовДок.Номенклатура = СпрНом.Ссылка И СпрНом.Код ПОДОБНО ""MR%""
	|ГДЕ
	|	Док.ПометкаУдаления = Ложь
	|	И Док.Организация = &Организация
	|	И Док.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Док.Ссылка КАК Регистратор,
	|	Док.МоментВремени КАК МоментВремени,
	|	ТовДок.НомерСтроки,
	|	ТовДок.Номенклатура КАК Номенклатура,
	|	ТовДок.Количество КАК КоличествоОборот,
	|	ТовДок.Сумма КАК СуммаОборот
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Док
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ТовДок
	|	ПО Док.Ссылка = ТовДок.Ссылка
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНом
	|	ПО ТовДок.Номенклатура = СпрНом.Ссылка И СпрНом.Код ПОДОБНО ""MR%""
	|ГДЕ
	|	Док.ПометкаУдаления = Ложь
	|	И Док.Организация = &Организация
	|	И Док.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Регистратор");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	//Запрос.УстановитьПараметр("СчетаУчета", ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	//Запрос.УстановитьПараметр("СчетаУчета", ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
	//ВидыСубконто = Новый Массив;
	//ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	//ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	//Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	//Комитенты = Новый Массив;
	//Комитенты.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("МЕРКУРИ КЛАССИК ООО"));
	//Комитенты.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("Находченко"));
	//Комитенты.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("ИП Наурузова Р.К."));
	//Запрос.УстановитьПараметр("Комитенты", Комитенты);
	ВыборкаДокументов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Регистратор");
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.Регистратор.ПолучитьОбъект();
		ВыборкаСтрок = ВыборкаДокументов.Выбрать();
		Пока ВыборкаСтрок.Следующий() Цикл
			СтрокаТЧ = ДокументОбъект.Товары[ВыборкаСтрок.НомерСтроки-1];
			Если СтрокаТЧ.Номенклатура = ВыборкаСтрок.Номенклатура Тогда
				СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
				//СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
				Если ТипЗнч(ВыборкаДокументов.Регистратор) = ТипЗнч(Документы.ПоступлениеТоваровУслуг.ПустаяСсылка()) Тогда
					СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
				ИначеЕсли ТипЗнч(ВыборкаДокументов.Регистратор) = ТипЗнч(Документы.РеализацияТоваровУслуг.ПустаяСсылка()) Тогда
					СтрокаТЧ.СчетДоходов = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
					СтрокаТЧ.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;
					СтрокаТЧ.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
				ИначеЕсли ТипЗнч(ВыборкаДокументов.Регистратор) = ТипЗнч(Документы.ОтчетОРозничныхПродажах.ПустаяСсылка()) Тогда
					СтрокаТЧ.СчетДоходов = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
					СтрокаТЧ.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;
					СтрокаТЧ.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
				Иначе
					Сообщить("Неизвестный тип документа! " + Строка(ВыборкаДокументов.Регистратор));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ДокументОбъект.Модифицированность() Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстСобствТоварыНаСервереСтар2(Организация, НачалоПериода, КонецПериода)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Док.Ссылка КАК Регистратор,
	|	Док.МоментВремени КАК МоментВремени,
	|	ТовДок.НомерСтроки,
	|	ТовДок.Номенклатура КАК Номенклатура,
	|	ТовДок.Количество КАК КоличествоОборот,
	|	ТовДок.Сумма КАК СуммаОборот
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК Док
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Товары КАК ТовДок
	|	ПО Док.Ссылка = ТовДок.Ссылка
	|ГДЕ
	|	Док.ПометкаУдаления = Ложь
	|	И Док.Организация = &Организация
	|	И Док.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТовДок.Цена = 0
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Док.Ссылка КАК Регистратор,
	|	Док.МоментВремени КАК МоментВремени,
	|	ТовДок.НомерСтроки,
	|	ТовДок.Номенклатура КАК Номенклатура,
	|	ТовДок.Количество КАК КоличествоОборот,
	|	ТовДок.Сумма КАК СуммаОборот
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Док
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ТовДок
	|	ПО Док.Ссылка = ТовДок.Ссылка
	|ГДЕ
	|	Док.ПометкаУдаления = Ложь
	|	И Док.Организация = &Организация
	|	И Док.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТовДок.Цена = 0
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени,
	|	НомерСтроки УБЫВ
	|ИТОГИ ПО
	|	Регистратор");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	//Запрос.УстановитьПараметр("СчетаУчета", ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	//Запрос.УстановитьПараметр("СчетаУчета", ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
	//ВидыСубконто = Новый Массив;
	//ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	//ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	//Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	//Комитенты = Новый Массив;
	//Комитенты.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("МЕРКУРИ КЛАССИК ООО"));
	//Комитенты.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("Находченко"));
	//Комитенты.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("ИП Наурузова Р.К."));
	//Запрос.УстановитьПараметр("Комитенты", Комитенты);
	ВыборкаДокументов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Регистратор");
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.Регистратор.ПолучитьОбъект();
		ВыборкаСтрок = ВыборкаДокументов.Выбрать();
		Пока ВыборкаСтрок.Следующий() Цикл
			СтрокаТЧ = ДокументОбъект.Товары[ВыборкаСтрок.НомерСтроки-1];
			Если СтрокаТЧ.Цена = 0 Тогда
				ДокументОбъект.Товары.Удалить(СтрокаТЧ);
			КонецЕсли;
		КонецЦикла;
		Если ДокументОбъект.Модифицированность() Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура УстСобствТовары(Команда)
	УстСобствТоварыНаСервере(Объект.ОрганизацияПоУмолчанию, Объект.НачалоПериода, КонецДня(Объект.КонецПериода));
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьЦеныНаПроцентНаСервере(ДокументОбработки, ПроцентЦен, ЗаписыватьДокумент)
	ДокументОбъект = ДокументОбработки.ПолучитьОбъект();
	ЗаданнаяСуммаДокумента = ДокументОбъект.СуммаДокумента + (ПроцентЦен * ДокументОбъект.СуммаДокумента) / 100;
	ТекущаяСуммаДокумента = ЗаданнаяСуммаДокумента;
	ЗнакОкругления = 0;
	Для Каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
		ЦенаСтрокиИзмененная = Окр(СтрокаТЧ.Цена + (ПроцентЦен * СтрокаТЧ.Цена) / 100, 0);
		ТекущаяСуммаДокумента = ТекущаяСуммаДокумента - ЦенаСтрокиИзмененная * СтрокаТЧ.Количество;
		РазрядностьЦены = СтрДлина(Формат(ЦенаСтрокиИзмененная, "ЧДЦ=; ЧН=0; ЧГ=0"));
		РазрядностьОкругления = 1;
		Если РазрядностьЦены > 2 Тогда
			РазрядностьОкругления = РазрядностьЦены - 2;
		КонецЕсли;
		Если ЗнакОкругления = 0 Тогда
			ЦенаСтрокиОкругленная = Окр(ЦенаСтрокиИзмененная, -(РазрядностьОкругления-1));
		ИначеЕсли ЗнакОкругления = 1 Тогда
			ЦенаСтрокиОкругленная = Pow(10, РазрядностьОкругления-1) * (Цел(ЦенаСтрокиИзмененная / Pow(10, РазрядностьОкругления-1)) + 1);
		ИначеЕсли ЗнакОкругления = -1 Тогда
			ЦенаСтрокиОкругленная = Pow(10, РазрядностьОкругления-1) * (Цел(ЦенаСтрокиИзмененная / Pow(10, РазрядностьОкругления-1)));
		КонецЕсли;
		СтрокаТЧ.Цена = ЦенаСтрокиОкругленная;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТЧ, 0);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ДокументОбъект.СуммаВключаетНДС);
		
		ТекущаяСуммаДокумента = ТекущаяСуммаДокумента + ЦенаСтрокиОкругленная * СтрокаТЧ.Количество;
		Если ТекущаяСуммаДокумента > ЗаданнаяСуммаДокумента Тогда
			ЗнакОкругления = -1;
		ИначеЕсли ТекущаяСуммаДокумента < ЗаданнаяСуммаДокумента Тогда
			ЗнакОкругления = 1;
		Иначе
			ЗнакОкругления = 0;
		КонецЕсли;
	КонецЦикла;
	Сообщить(ДокументОбъект.Товары.Итог("Сумма"));
	Если ЗаписыватьДокумент Тогда
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЦеныНаПроцент(Команда)
	ИзменитьЦеныНаПроцентНаСервере(Объект.ДокументОбработки, Объект.ПроцентЦен, Объект.КодТовараВMerExternalItemId);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИПроставитьОстатокНаСервере(МассивXLS)
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	ТаблицаXLS = ПреобразоватьМассивВТаблицуЗначений(МассивXLS);
	Попытка
		ВыгрузкаЗавершена = ОбъектДляСервера.ЗагрузитьТаблицуИПроставитьОстаток(ТаблицаXLS);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИПроставитьОстаток(Команда)
	Перем КолСтрок;
	МассивXLS = ЗагрузитьМетодом_MSADODB(Объект.ФайлXLS, "TDSheet", 1, 0, , КолСтрок);
	ЗагрузитьИПроставитьОстатокНаСервере(МассивXLS);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтрОстаткиПоМесяцамНаСервере()
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	
	ВыгрузкаЗавершена = ОбъектДляСервера.ЗаполнитьОтрицательныеОстаткиПоПериоду("Месяц");
	
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтрОстаткиПоМесяцам(Команда)
	ЗаполнитьОтрОстаткиПоМесяцамНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОкруглитьЗагруженные(Команда)
	ОкруглитьТаблицуЗакупок();
КонецПроцедуры

&НаСервере
Процедура ОкруглитьТаблицуЗакупок()
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	
	//ОбъектДляСервера.ТаблицаЗакупокXLS.Итог("Сумма");
	//
	//ЗаданнаяСуммаДокумента = ОбъектДляСервера.ТаблицаЗакупокXLS.Итог("Сумма");
	//ТекущаяСуммаДокумента = ЗаданнаяСуммаДокумента;
	//ЗнакОкругления = 0;
	//Для Каждого СтрокаТЧ Из ОбъектДляСервера.ТаблицаЗакупокXLS Цикл
	//	СуммаСтрокиИзмененная = Окр(СтрокаТЧ.Сумма, 0);
	//	ТекущаяСуммаДокумента = ТекущаяСуммаДокумента - СуммаСтрокиИзмененная;
	//	РазрядностьСуммы = СтрДлина(Формат(СуммаСтрокиИзмененная, "ЧДЦ=; ЧН=0; ЧГ=0"));
	//	РазрядностьОкругления = 1;
	//	Если РазрядностьСуммы > 2 Тогда
	//		РазрядностьОкругления = РазрядностьСуммы - 2;
	//	КонецЕсли;
	//	Если ЗнакОкругления = 0 Тогда
	//		СуммаСтрокиОкругленная = Окр(СуммаСтрокиИзмененная, -(РазрядностьОкругления-1));
	//	ИначеЕсли ЗнакОкругления = 1 Тогда
	//		СуммаСтрокиОкругленная = Pow(10, РазрядностьОкругления-1) * (Цел(СуммаСтрокиИзмененная / Pow(10, РазрядностьОкругления-1)) + 1);
	//	ИначеЕсли ЗнакОкругления = -1 Тогда
	//		СуммаСтрокиОкругленная = Pow(10, РазрядностьОкругления-1) * (Цел(СуммаСтрокиИзмененная / Pow(10, РазрядностьОкругления-1)));
	//	КонецЕсли;
	//	СтрокаТЧ.Сумма = СуммаСтрокиОкругленная;
	//	СтрокаТЧ.Цена = СуммаСтрокиОкругленная / СтрокаТЧ.Количество;
	//	
	//	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТЧ, 0);
	//	УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТЧ.Сумма, Истина, 18);
	//	
	//	ТекущаяСуммаДокумента = ТекущаяСуммаДокумента + СуммаСтрокиОкругленная;
	//	Если ТекущаяСуммаДокумента > ЗаданнаяСуммаДокумента Тогда
	//		ЗнакОкругления = -1;
	//	ИначеЕсли ТекущаяСуммаДокумента < ЗаданнаяСуммаДокумента Тогда
	//		ЗнакОкругления = 1;
	//	Иначе
	//		ЗнакОкругления = 0;
	//	КонецЕсли;
	//КонецЦикла;
	
	//Рассчитать коэфициент
	Для Каждого СтрокаТаб Из ОбъектДляСервера.ТаблицаЗакупокXLS Цикл
		Если СтрокаТаб.Продано = 0 Тогда
			Если СтрокаТаб.РозничнаяЦена > 0 И СтрокаТаб.Цена * 2 > СтрокаТаб.РозничнаяЦена Тогда
				СтрокаТаб.Цена = Окр(СтрокаТаб.РозничнаяЦена / 2, 0);
				Сумма = СтрокаТаб.Цена * СтрокаТаб.Количество;
				РазницаСуммы = Сумма - СтрокаТаб.Сумма;
				СтрокаТаб.Сумма = Сумма;
				//ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаб, Истина);
				СтрокаТаб.СуммаНДС = СтрокаТаб.Сумма * 0.18;
				СтрокиДок = ОбъектДляСервера.ТаблицаСуммДокументов.НайтиСтроки(Новый Структура("ДокументСсылка", СтрокаТаб.ДокументСсылка));
				Если СтрокиДок.Количество() > 0 Тогда
					СтрокиДок[0].Распределено = СтрокиДок[0].Распределено + РазницаСуммы;
				КонецЕсли;
			Иначе
				СтрокиДок = ОбъектДляСервера.ТаблицаСуммДокументов.НайтиСтроки(Новый Структура("ДокументСсылка", СтрокаТаб.ДокументСсылка));
				Если СтрокиДок.Количество() > 0 Тогда
					СтрокиДок[0].ОткрытаяСумма = СтрокиДок[0].ОткрытаяСумма + СтрокаТаб.Сумма;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаДок Из ОбъектДляСервера.ТаблицаСуммДокументов Цикл
		Если СтрокаДок.Сумма <> СтрокаДок.Распределено И СтрокаДок.ОткрытаяСумма > 0 Тогда
			ЗаданнаяСуммаДокумента = СтрокаДок.Сумма;
			ТекущаяСуммаДокумента = СтрокаДок.Распределено;
			Коэф = (СтрокаДок.Сумма - (СтрокаДок.Распределено - СтрокаДок.ОткрытаяСумма)) / СтрокаДок.ОткрытаяСумма;
			ЗнакОкругления = 0;
			СтрокиТаб = ОбъектДляСервера.ТаблицаЗакупокXLS.НайтиСтроки(Новый Структура("ДокументСсылка", СтрокаДок.ДокументСсылка));
			Для Каждого СтрокаТаб Из СтрокиТаб Цикл
				РазницаСуммы = 0;
				Если СтрокаТаб.Продано = 0 И (СтрокаТаб.РозничнаяЦена = 0 ИЛИ СтрокаТаб.Цена * 2 < СтрокаТаб.РозничнаяЦена) Тогда
					ЦенаСтрокиИзмененная = Окр(Коэф * СтрокаТаб.Цена, 0);
					СтрокаТаб.Цена = ЦенаСтрокиИзмененная;
					РазницаСуммы = СтрокаТаб.Сумма;
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаб, 0);
					РазницаСуммы = СтрокаТаб.Сумма - РазницаСуммы;
				КонецЕсли;
				СтрокаДок.Распределено = СтрокаДок.Распределено + РазницаСуммы;
			КонецЦикла;
			ТекущаяСуммаДокумента = СтрокаДок.Распределено;
			Если ТекущаяСуммаДокумента > ЗаданнаяСуммаДокумента Тогда
				ЗнакОкругления = -1;
			ИначеЕсли ТекущаяСуммаДокумента < ЗаданнаяСуммаДокумента Тогда
				ЗнакОкругления = 1;
			Иначе
				ЗнакОкругления = 0;
			КонецЕсли;
			Для Каждого СтрокаТаб Из СтрокиТаб Цикл
				РазницаСуммы = 0;
				ЦенаСтрокиИзмененная = СтрокаТаб.Цена;
				Если СтрокаТаб.РозничнаяЦена = 0 Или ЦенаСтрокиИзмененная * 2 <= СтрокаТаб.РозничнаяЦена Тогда
					ТекущаяСуммаДокумента = ТекущаяСуммаДокумента - ЦенаСтрокиИзмененная * СтрокаТаб.Количество;
				
					РазрядностьЦены = СтрДлина(Формат(ЦенаСтрокиИзмененная, "ЧДЦ=; ЧН=0; ЧГ=0"));
					РазрядностьОкругления = 1;
					Если РазрядностьЦены > 2 Тогда
						РазрядностьОкругления = РазрядностьЦены - 2;
					КонецЕсли;
					Если ЗнакОкругления = 0 Тогда
						ЦенаСтрокиОкругленная = Окр(ЦенаСтрокиИзмененная, -(РазрядностьОкругления-1));
					ИначеЕсли ЗнакОкругления = 1 Тогда
						ЦенаСтрокиОкругленная = Pow(10, РазрядностьОкругления-1) * (Цел(ЦенаСтрокиИзмененная / Pow(10, РазрядностьОкругления-1)) + 1);
					ИначеЕсли ЗнакОкругления = -1 Тогда
						ЦенаСтрокиОкругленная = Pow(10, РазрядностьОкругления-1) * (Цел(ЦенаСтрокиИзмененная / Pow(10, РазрядностьОкругления-1)));
					КонецЕсли;
					СтрокаТаб.Цена = ЦенаСтрокиОкругленная;
					РазницаСуммы = СтрокаТаб.Сумма;
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаб, 0);
					РазницаСуммы = СтрокаТаб.Сумма - РазницаСуммы;
					//ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаб, Истина);
					СтрокаТаб.СуммаНДС = СтрокаТаб.Сумма * 0.18;
					
					ТекущаяСуммаДокумента = ТекущаяСуммаДокумента + ЦенаСтрокиОкругленная * СтрокаТаб.Количество;
					Если ТекущаяСуммаДокумента > ЗаданнаяСуммаДокумента Тогда
						ЗнакОкругления = -1;
					ИначеЕсли ТекущаяСуммаДокумента < ЗаданнаяСуммаДокумента Тогда
						ЗнакОкругления = 1;
					Иначе
						ЗнакОкругления = 0;
					КонецЕсли;
				КонецЕсли;
				СтрокаДок.Распределено = СтрокаДок.Распределено + РазницаСуммы;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
КонецПроцедуры

&НаСервере
Процедура ТестНаСервере()
	Структура = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	Сообщить("login='"+Структура.Логин+"',password='"+Структура.Пароль+"'");
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	
	ВыгрузкаЗавершена = ОбъектДляСервера.ЗаполнитьАдреснуюИнформацию();
	//НовыйОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	
	//ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура Тест(Команда)
	Перем НовыйОбъект;
	ТестНаСервере();
	Возврат;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначениеКопирования", Объект.ДокументОбработки);
	
	//Получая форму объекта создаваемого документа
	ФормаДок = ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаОбъекта", ПараметрыФормы, , Истина); 

    ДанныеФормы = ФормаДок.Объект; 
    
    //Мы помещаем объект формы в переменную, 
    //так как должны передать её в процедуру на сервере,
    //где нельзя изменять объект формы, зато можно править переменную содержащую его
    КопироватьТабЧасть(Объект.ДокументОбработки, ДанныеФормы);
    
    //После выполнения процедуры на сервере мы получаем изменную переменную ДанныеФормы,
    //которую необходимо передать в уже созданную нами форму
    КопироватьДанныеФормы(ДанныеФормы, ФормаДок.Объект);
	ФормаДок.ПриИзмененииЦеныИВалюты(ДанныеФормы.ВалютаДокумента, ДанныеФормы.КурсВзаиморасчетов, ДанныеФормы.КратностьВзаиморасчетов);
КонецПроцедуры

&НаСервере
Процедура КопироватьТабЧасть(Элемент, НовыйОбъект)

    // Заполняем
	//Объект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	//Объект.Скопировать();
	
	Основание             = Элемент.Ссылка;
    
	//НовыйОбъект.Дата         = ТекущаяДата();
	//НовыйОбъект.Склад         = Основание.Склад; 
	//НовыйОбъект.ПомещениеОтправитель= Основание.Помещение; 
    
    // Переносим строки
	Для каждого СтрокаТЧ из Основание.Товары Цикл
		НоваяСтрока = НовыйОбъект.Товары.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.Всего = НоваяСтрока.Сумма;
		//НоваяСтрока.ИсходныйНомерСтроки = НоваяСтрока.НомерСтроки;
    КонецЦикла;
    
КонецПроцедуры
&НаСервереБезКонтекста
Процедура ПровестиДокументыКомплектацииНаСервере(НачалоПериода, КонецПериода)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Док.Ссылка КАК Регистратор,
	|	Док.Дата КАК Дата,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.Номенклатура,
	|	Док.Количество,
	|	Док.СчетУчета,
	|	Док.СчетСписанияНДС,
	|	Док.СубконтоСписанияНДС1,
	|	Док.СубконтоСписанияНДС2,
	|	Док.РучнаяКорректировка,
	|	Док.ВидОперации,
	|	Док.Дата,
	|	Док.Организация,
	|	Док.Комплектующие.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Количество,
	|		ДоляСтоимости,
	|		СчетУчета,
	|		НомерГТД,
	|		СтранаПроисхождения,
	|		Сумма
	|	)
	|ИЗ
	|	Документ.КомплектацияНоменклатуры КАК Док
	|ГДЕ
	|	Док.ПометкаУдаления = ЛОЖЬ
	|	И Док.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени");
	ЗапросОстатков = Новый Запрос("ВЫБРАТЬ
	|	ХозрасчетныйОстатки_КонОст.Счет КАК Счет,
	|	ХозрасчетныйОстатки_КонОст.Организация КАК Организация,
	|	ХозрасчетныйОстатки_КонОст.Субконто1 КАК Номенклатура,
	|	СУММА(ХозрасчетныйОстатки_КонОст.КоличествоОстаток) КАК Количество,
	|	СУММА(ХозрасчетныйОстатки_КонОст.СуммаОстаток) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (&СчетаУчета), &ВидыСубконто, Субконто1 В (&Номенклатура)) КАК ХозрасчетныйОстатки_КонОст
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки_КонОст.Счет,
	|	ХозрасчетныйОстатки_КонОст.Организация,
	|	ХозрасчетныйОстатки_КонОст.Субконто1");
	СчетаУчета = Новый Массив;
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ТоварыНаСкладах); // 41.01
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("41.01.1")); // 41.01
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); // 004.01
	ЗапросОстатков.УстановитьПараметр("СчетаУчета", СчетаУчета);
	ЗапросОстатков.УстановитьПараметр("ВидыСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	//Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.Регистратор.ПолучитьОбъект();
		Если ВыборкаДокументов.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда
			//Найти остатки
			СчётСписания = ВыборкаДокументов.СчетУчета;
			Организация = ВыборкаДокументов.Организация;
			ЗапросОстатков.УстановитьПараметр("Период", ВыборкаДокументов.Дата);
			ЗапросОстатков.УстановитьПараметр("Номенклатура", ВыборкаДокументов.Номенклатура);
			ВыборкаОстатков = ЗапросОстатков.Выполнить().Выбрать();
			Если ВыборкаОстатков.Следующий() Тогда
				СчётСписания = ВыборкаОстатков.Счет;
				Организация = ВыборкаОстатков.Организация;
			КонецЕсли;
			ДокументОбъект.СчетУчета = СчётСписания;
			ДокументОбъект.Организация = Организация;
			Для Каждого СтрокаТЧ Из ДокументОбъект.Комплектующие Цикл
				СтрокаТЧ.СчетУчета = СчётСписания;
			КонецЦикла;
		ИначеЕсли ВыборкаДокументов.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
			//Найти остатки
			ЗапросОстатков.УстановитьПараметр("Период", ВыборкаДокументов.Дата);
			ЗапросОстатков.УстановитьПараметр("Номенклатура", ДокументОбъект.Комплектующие.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура"));
			ВыборкаОстатков = ЗапросОстатков.Выполнить().Выбрать();
			СчётСписания = ВыборкаДокументов.СчетУчета;
			Организация = ВыборкаДокументов.Организация;
			Для Каждого СтрокаТЧ Из ДокументОбъект.Комплектующие Цикл
				Если ВыборкаОстатков.НайтиСледующий(Новый Структура("Номенклатура", СтрокаТЧ.Номенклатура)) Тогда
					СтрокаТЧ.СчетУчета = ВыборкаОстатков.Счет;
					СчётСписания = ВыборкаОстатков.Счет;
					Организация = ВыборкаОстатков.Организация;
				КонецЕсли;
				ВыборкаОстатков.Сбросить();
			КонецЦикла;
			ДокументОбъект.СчетУчета = СчётСписания;
			ДокументОбъект.Организация = Организация;
		КонецЕсли;
		Если ДокументОбъект.Модифицированность() Тогда
			//ДокументОбъект.РучнаяКорректировка = Ложь;
			//ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ДокументОбъект.РучнаяКорректировка = Истина;
			Отказ = Ложь;
			ОбработкаПроведенияКомплектации(ДокументОбъект, Отказ, РежимПроведенияДокумента.Неоперативный);
			ДокументОбъект.Проведен = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокументыКомплектации(Команда)
	ПровестиДокументыКомплектацииНаСервере(Объект.НачалоПериода, Объект.КонецПериода);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработкаПроведенияКомплектации(ДокументОбъект, Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПодготовитьНаборыЗаписейКПроведению(ДокументОбъект);
	//Если ДокументОбъект.РучнаяКорректировка Тогда
	//	Возврат;
	//КонецЕсли;

	ПараметрыПроведения = Документы.КомплектацияНоменклатуры.ПодготовитьПараметрыПроведения(ДокументОбъект.Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ

	// Таблица списанных товаров - комплектация
	ТаблицаСписанныеТоварыКомплектация = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(
		ПараметрыПроведения.СписаниеТоваровКомплектацияТаблица, ПараметрыПроведения.СписаниеТоваровКомплектация, Отказ);
	
	ТаблицаКомплектующиеКомплектация = УчетТоваров.ПодготовитьТаблицуКомплектующихКомплектация(
		ТаблицаСписанныеТоварыКомплектация, ПараметрыПроведения.СписаниеТоваровКомплектация, Отказ);

	// Таблица списанных товаров - разукомплектация
	СписаниеТоваровРазукомплектацияТаблица	=
		Документы.КомплектацияНоменклатуры.ПодготовитьТаблицуСписаниеТоваровРазукомплектация(
			ПараметрыПроведения.СписаниеТоваровРазукомплектацияТаблица, ПараметрыПроведения.СписаниеТоваровРазукомплектация);
	
	ТаблицаСписанныеТоварыРазукомплектация = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(
		СписаниеТоваровРазукомплектацияТаблица, ПараметрыПроведения.СписаниеТоваровРазукомплектация, Отказ);

	ТаблицаКомплектующиеРазукомплектация = УчетТоваров.ПодготовитьТаблицуКомплектующихРазукомплектация(
		СписаниеТоваровРазукомплектацияТаблица, ТаблицаСписанныеТоварыРазукомплектация, Отказ);

	Документы.КомплектацияНоменклатуры.ДобавитьКолонкуСодержание(ПараметрыПроведения.ПоступлениеГТДТаблица);

	// Структура таблиц для отражения в налоговом учете УСН
	ТаблицаСписанныеТовары = ТаблицаКомплектующиеКомплектация.Скопировать();
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКомплектующиеРазукомплектация, ТаблицаСписанныеТовары);
	СтруктураТаблицУСН = Новый Структура("ТаблицаТМЦ", ТаблицаСписанныеТовары);
	
	// Учет доходов и расходов ИП
	ТаблицыМатериаловПродукцииИПКомплектация = Документы.КомплектацияНоменклатуры.ПодготовитьТаблицыМатериаловПродукцииИП(
		ТаблицаКомплектующиеКомплектация, ПараметрыПроведения.СписаниеТоваровКомплектация);
	
	ТаблицыМатериаловПродукцииИПРазукомплектация = Документы.КомплектацияНоменклатуры.ПодготовитьТаблицыМатериаловПродукцииИП(
		ТаблицаКомплектующиеРазукомплектация, ПараметрыПроведения.СписаниеТоваровРазукомплектация);
	
	ТаблицыСписанияМПЗИПКомплектация = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыСписанияМПЗ(
		ТаблицыМатериаловПродукцииИПКомплектация.ТаблицаМатериалов, ПараметрыПроведения.СписаниеТоваровКомплектация, Отказ);
	
	ТаблицыСписанияМПЗИПРазукомплектация = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыСписанияМПЗ(
		ТаблицыМатериаловПродукцииИПРазукомплектация.ТаблицаМатериалов, ПараметрыПроведения.СписаниеТоваровРазукомплектация, Отказ);
	
	ТаблицаПоступленияПродукцииИПКомплектация = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПоступлениеПродукции(
		ТаблицыМатериаловПродукцииИПКомплектация.ПолученоПродукции, ПараметрыПроведения.СписаниеТоваровКомплектация);
	
	ТаблицаПоступленияПродукцииИПРазукомплектация = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПоступлениеПродукции(
		ТаблицыМатериаловПродукцииИПРазукомплектация.ПолученоПродукции, ПараметрыПроведения.СписаниеТоваровРазукомплектация);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ

	УчетТоваров.СформироватьДвиженияКомплектация(ТаблицаКомплектующиеКомплектация,
		ПараметрыПроведения.СписаниеТоваровКомплектация, ДокументОбъект.Движения, Отказ);
	УчетТоваров.СформироватьДвиженияКомплектация(ТаблицаКомплектующиеРазукомплектация,
		ПараметрыПроведения.СписаниеТоваровРазукомплектация, ДокументОбъект.Движения, Отказ);

	// Учет НДС
	УчетНДСБП.СформироватьДвиженияКомплектацияТоваров(
		ПараметрыПроведения.ТоварыКомплектацияНДС, ТаблицаСписанныеТоварыКомплектация, 
		ПараметрыПроведения.РеквизитыНДС, ДокументОбъект.Движения, Отказ);
	УчетНДСРаздельный.СформироватьДвиженияКомплектацияТоваров(
		ПараметрыПроведения.ТоварыКомплектацияНДС, ТаблицаСписанныеТоварыКомплектация, 
		ПараметрыПроведения.РеквизитыНДС, ДокументОбъект.Движения, Отказ);
		
	Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда
		СписаниеГТДТаблица = ПараметрыПроведения.ПоступлениеГТДТаблица.СкопироватьКолонки();
		СписаниеГТДТаблица.Колонки.Добавить("ИмяСписка");
		СписаниеГТДТаблица.Колонки.Добавить("Комплектующие");
		СписаниеГТДТаблица.Колонки.Добавить("НомерСтрокиДокумента");
		СтрокаГТД = СписаниеГТДТаблица.Добавить();
		СтрокаГТД.НомерСписка = 1;
		СтрокаГТД.НомерСтроки = 1;
		СтрокаГТД.НомерСтрокиДокумента = 1;
		СтрокаГТД.Номенклатура = ДокументОбъект.Номенклатура;
		СтрокаГТД.СчетУчета = ДокументОбъект.СчетУчета;
		СтрокаГТД.НомерГТД = ДокументОбъект.СубконтоСписанияНДС1;
		СтрокаГТД.СтранаПроисхождения = ДокументОбъект.СубконтоСписанияНДС2;
		СтрокаГТД.Количество = ДокументОбъект.Количество;
		СтрокаГТД.Содержание = "Разукомплектация товаров";
		СтрокаГТД.ИмяСписка = "Комплект";
		СтрокаГТД.Комплектующие = "Комплект";
		УчетНДСБП.СформироватьПроводкиСписаниеГТД(СписаниеГТДТаблица, ПараметрыПроведения.РеквизитыНДС[0], ДокументОбъект.Движения, Отказ);
	Иначе
		//СписаниеГТДТаблица = ПараметрыПроведения.ПоступлениеГТДТаблица.СкопироватьКолонки();
		//СписаниеГТДТаблица.Колонки.Добавить("ИмяСписка");
		//СписаниеГТДТаблица.Колонки.Добавить("Комплектующие");
		//СписаниеГТДТаблица.Колонки.Добавить("НомерСтрокиДокумента");
		СтрокаГТД = ПараметрыПроведения.ПоступлениеГТДТаблица.Добавить();
		СтрокаГТД.НомерСписка = 1;
		СтрокаГТД.НомерСтроки = 1;
		//СтрокаГТД.НомерСтрокиДокумента = 1;
		СтрокаГТД.Номенклатура = ДокументОбъект.Номенклатура;
		СтрокаГТД.СчетУчета = ДокументОбъект.СчетУчета;
		СтрокаГТД.НомерГТД = ДокументОбъект.СубконтоСписанияНДС1;
		СтрокаГТД.СтранаПроисхождения = ДокументОбъект.СубконтоСписанияНДС2;
		СтрокаГТД.Количество = ДокументОбъект.Количество;
		СтрокаГТД.Содержание = "Оприходованы МПЗ";
		УчетНДСБП.СформироватьПроводкиПоступлениеГТД(ПараметрыПроведения.ПоступлениеГТДТаблица, ПараметрыПроведения.РеквизитыНДС[0], ДокументОбъект.Движения, Отказ);
	КонецЕсли;
	УчетНДСБП.СформироватьДвиженияРазукомплектацияТоваров(
		ПараметрыПроведения.ТоварыРазукомплектацияНДС, ТаблицаСписанныеТоварыРазукомплектация, 
		ПараметрыПроведения.ПоступлениеГТДТаблица, ПараметрыПроведения.РеквизитыНДС, ДокументОбъект.Движения, Отказ);
	УчетНДСРаздельный.СформироватьДвиженияРазукомплектацияТоваров(
		ПараметрыПроведения.ТоварыРазукомплектацияНДС, ТаблицаСписанныеТоварыРазукомплектация, 
		ПараметрыПроведения.РеквизитыНДС, ДокументОбъект.Движения, Отказ);
		
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ДокументОбъект, СтруктураТаблицУСН);
	
	// Учет доходов и расходов ИП
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияСписаниеМПЗ(
		ТаблицыСписанияМПЗИПКомплектация,
		ПараметрыПроведения.СписаниеТоваровКомплектация, ДокументОбъект.Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияСписаниеМПЗ(
		ТаблицыСписанияМПЗИПРазукомплектация,
		ПараметрыПроведения.СписаниеТоваровРазукомплектация, ДокументОбъект.Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПоступлениеПродукции(
		ТаблицаПоступленияПродукцииИПКомплектация,
		ТаблицыСписанияМПЗИПКомплектация.СтоимостьПродукции,
		ПараметрыПроведения.СписаниеТоваровКомплектация, ДокументОбъект.Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПоступлениеПродукции(
		ТаблицаПоступленияПродукцииИПРазукомплектация,
		ТаблицыСписанияМПЗИПРазукомплектация.СтоимостьПродукции,
		ПараметрыПроведения.СписаниеТоваровРазукомплектация, ДокументОбъект.Движения, Отказ);
		
	// Регистрация в последовательности
	//РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
	//	ДокументОбъект, Отказ, , ПараметрыПроведения.ТаблицаРегистрации);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьПараметрыКомплектацияТоваров(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Организация,"              // <СправочникСсылка.Организации>
	+ "Склад,"                    // <СправочникСсылка.Склады>
	+ "Подразделение,"            // <Ссылка на справочник подразделений>
	+ "НДСвСтоимостиТоваров,"	  // <ПеречислениеСсылка.ДействиеНДСВСтоимостиТоваров> - действие по включению/исключению НДС Из стоимости
	+ "СчетСписанияНДС,"          // <ПланСчетовСсылка.Хозрасчетный> - счет затрат, куда относится ранее принятый к вычету НДС при включении НДС в стоимость
	+ "СубконтоСписанияНДС1,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СубконтоСписанияНДС2,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СубконтоСписанияНДС3,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Комплект,"                 // <СправочникСсылка.Номенклатура>
	+ "КоличествоКомплектов,"     // <Число,15,3>
	+ "СчетУчетаКомплектов"       // <ПланСчетовСсылка.Хозрасчетный>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// Для списания на расходы ранее принятого к вычету НДС счет и аналитика списания товара не используются
	Параметры.Реквизиты.Колонки.Добавить("СписыватьНДСнаКорСчетИАналитикуТовара", Новый ОписаниеТипов("Булево")); // Ложь

	// Подготовка таблицы товаров документа:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтрокиДокумента,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "СчетУчета,"
	+ "НовыйСпособУчетаНДС"
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы списанных товаров по данным бух.учета:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Склад,"
	+ "Партия,"
	+ "Количество,"
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение"
	;
	Параметры.Вставить("СписанныеТоварыБухУчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТоварыБухУчет, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

&НаСервереБезКонтекста
// Процедура выполняет подготовку наборов записей документа к проведению документа.
// 1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
// 2. Взводит флаг записи у наборов, по которым документ имел движения при прошлом проведении
// 3. Устанавливает активность наборам записей документов с установленным флагом ручной корректировки
// 4. Записывает пустые наборы, если дата ранее проведенного документа была сдвинута вперед
// Вызывается из модуля документа при проведении.
//
Процедура ПодготовитьНаборыЗаписейКПроведению(ДокументОбъект, ВыборочноОчищатьРегистры = Истина) Экспорт
	
	// С целью оптимизации производительности запоминаем значение свойства в переменной.
	ПропуститьПроверкуЗапретаИзменения = ДокументОбъект.ДополнительныеСвойства.Свойство("ПропуститьПроверкуЗапретаИзменения");
	
	Для каждого НаборЗаписей Из ДокументОбъект.Движения Цикл
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;
		Если ПропуститьПроверкуЗапретаИзменения Тогда
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		КонецЕсли;
	КонецЦикла;

	Если ДокументОбъект.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = ДокументОбъект.Метаданные();
	
	// Регистры, требующие принудительной очистки:
	МассивИменРегистровПринудительнойОчистки = Новый Массив;
	МассивИменРегистровПринудительнойОчистки.Добавить("РасходыПриУСН");
	МассивДвиженийДляПринудительнойОчистки = Новый Массив;
	
	МассивИменРегистров = Проведениесервер.ПолучитьМассивИспользуемыхРегистров(
		ДокументОбъект.Ссылка, 
		МетаданныеОбъекта.Движения);

	Для каждого ИмяРегистра Из МассивИменРегистров Цикл
		ДокументОбъект.Движения[ИмяРегистра].Записывать = Истина;
		Если МассивИменРегистровПринудительнойОчистки.Найти(ИмяРегистра) <> Неопределено
			ИЛИ НЕ ВыборочноОчищатьРегистры Тогда
			МассивДвиженийДляПринудительнойОчистки.Добавить(ДокументОбъект.Движения[ИмяРегистра]);
		КонецЕсли; 
	КонецЦикла;
	
	РучнаяКорректировка = МетаданныеОбъекта.Реквизиты.Найти("РучнаяКорректировка") <> Неопределено
		И ДокументОбъект.РучнаяКорректировка;
	
	Для каждого НаборЗаписей Из МассивДвиженийДляПринудительнойОчистки Цикл
		НаборЗаписей.Записать();
		НаборЗаписей.Записывать = Ложь;
	КонецЦикла; 
		
	//Если ДокументОбъект.ДополнительныеСвойства.ДатаДокументаСдвинутаВперед Тогда
		ДокументОбъект.Движения.Записать();
	//КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроставитьСкладВозвратовНаСервере()
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	Попытка
		ВыгрузкаЗавершена = ОбъектДляСервера.ПроставитьСкладыВозвратов();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьСкладВозвратов(Команда)
	ПроставитьСкладВозвратовНаСервере();
КонецПроцедуры

&НаСервере
Процедура ИзменитьЦеныНаПроцентТабНаСервере()
	//ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	СтрокиОбработки = Объект.ТаблицаЗакупокXLS.НайтиСтроки(Новый Структура("ТипДокумента, НомерДокумента", Объект.ТипДокументаПоУмолчанию, Объект.Фильтр));
	ТабИтогов = Объект.ТаблицаЗакупокXLS.Выгрузить(СтрокиОбработки, "Сумма");
	СуммаДокумента = ТабИтогов.Итог("Сумма");
	ЗаданнаяСуммаДокумента = СуммаДокумента + (Объект.ПроцентЦен * СуммаДокумента) / 100;
	ТекущаяСуммаДокумента = ЗаданнаяСуммаДокумента;
	ЗнакОкругления = 0;
	Для Каждого СтрокаТЧ Из СтрокиОбработки Цикл
		ЦенаСтрокиИзмененная = Окр(СтрокаТЧ.Цена + (Объект.ПроцентЦен * СтрокаТЧ.Цена) / 100, 0);
		ТекущаяСуммаДокумента = ТекущаяСуммаДокумента - ЦенаСтрокиИзмененная * СтрокаТЧ.Количество;
		РазрядностьЦены = СтрДлина(Формат(ЦенаСтрокиИзмененная, "ЧДЦ=; ЧН=0; ЧГ=0"));
		РазрядностьОкругления = 1;
		Если РазрядностьЦены > 2 Тогда
			РазрядностьОкругления = РазрядностьЦены - 2;
		КонецЕсли;
		Если ЗнакОкругления = 0 Тогда
			ЦенаСтрокиОкругленная = Окр(ЦенаСтрокиИзмененная, -(РазрядностьОкругления-1));
		ИначеЕсли ЗнакОкругления = 1 Тогда
			ЦенаСтрокиОкругленная = Pow(10, РазрядностьОкругления-1) * (Цел(ЦенаСтрокиИзмененная / Pow(10, РазрядностьОкругления-1)) + 1);
		ИначеЕсли ЗнакОкругления = -1 Тогда
			ЦенаСтрокиОкругленная = Pow(10, РазрядностьОкругления-1) * (Цел(ЦенаСтрокиИзмененная / Pow(10, РазрядностьОкругления-1)));
		КонецЕсли;
		СтрокаТЧ.Цена = ЦенаСтрокиОкругленная;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТЧ, 0);
		//ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ДокументОбъект.СуммаВключаетНДС);
		
		ТекущаяСуммаДокумента = ТекущаяСуммаДокумента + ЦенаСтрокиОкругленная * СтрокаТЧ.Количество;
		Если ТекущаяСуммаДокумента > ЗаданнаяСуммаДокумента Тогда
			ЗнакОкругления = -1;
		ИначеЕсли ТекущаяСуммаДокумента < ЗаданнаяСуммаДокумента Тогда
			ЗнакОкругления = 1;
		Иначе
			ЗнакОкругления = 0;
		КонецЕсли;
	КонецЦикла;
	//ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
	//Сообщить(ДокументОбъект.Товары.Итог("Сумма"));
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЦеныНаПроцентТаб(Команда)
	ИзменитьЦеныНаПроцентТабНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаменНаСервере()
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	Попытка
		ВыгрузкаЗавершена = ОбъектДляСервера.НайтиЗаменуНоменклатуры();
		//ВыгрузкаЗавершена = ОбъектДляСервера.НайтиЗаменуРемонта();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗамен(Команда)
	ОбработкаЗаменНаСервере();
КонецПроцедуры

&НаСервере
Процедура КорректировкаНоменклатурыДокументовНаСервере()
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	Попытка
		ВыгрузкаЗавершена = ОбъектДляСервера.КорректировкаНоменклатурыДокументов();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура КорректировкаНоменклатурыДокументов(Команда)
	КорректировкаНоменклатурыДокументовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗакупокXLSПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
    Если НоваяСтрока И Не Копирование Тогда
        Элемент.ТекущиеДанные.ТипДокумента = Объект.ТипДокументаПоУмолчанию;
    КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИсправитьВидыОплатНаСервере()
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	Попытка
		ВыгрузкаЗавершена = ОбъектДляСервера.ИсправитьВидыОплат();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ИсправитьВидыОплат(Команда)
	ИсправитьВидыОплатНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Тест2(Команда)
	//V82COMConnector= Новый COMОбъект("V83.Application");
	//V82COMConnector= Новый COMОбъект("V83.COMConnector");
	
	//МассивИменМетаданных = Новый Массив();
	//МассивИменМетаданных.Добавить("Документ.РеализацияТоваровУслуг");
	////СтруктБД=ПолучитьСтруктуруХраненияБазыДанных(МассивИменМетаданных);
	//ОбщегоНазначенияКлиент.ЗарегистрироватьCOMСоединитель(Истина);
	//МассивПутей = Тест2Сервер();
	//МассивПутей = Computer_EventsList(,,,НачалоДня(ТекущаяДата())-24*60*60,ТекущаяДата());
	//МассивПутей = Computer_SystemProcess();
	//Для Каждого ПолноеИмя Из МассивПутей Цикл
	//	СтрокаИнф = "";
	//	Для Каждого КлючИЗначение Из ПолноеИмя Цикл
	//		СтрокаИнф = СтрокаИнф + КлючИЗначение.Ключ + "=" + КлючИЗначение.Значение + ",";
	//	КонецЦикла;
	//	Сообщить(СтрокаИнф);
	//КонецЦикла;
	//Сообщить(МассивПутей);
	Тест3Сервер();
КонецПроцедуры

&НаСервереБезКонтекста
Функция Тест3Сервер()
	РассылкаЭлектронныхЧеков.ОтправитьСообщенияОчереди();
	//Администратор = Computer_BuildINAdministrator();
	//Возврат Computer_GroupUsersList();//UsersList = Computer_GroupUsersList();
	//Возврат Computer_UserList(,Администратор,UsersList);
КонецФункции

&НаСервереБезКонтекста
Функция Тест2Сервер()
	Перем КодВозврата;
	МассивПутей = Новый Массив;
	
	ФайлКоманды = ПолучитьИмяВременногоФайла("runas.bat");
	ЗаписьКоманды = Новый ЗаписьТекста(ФайлКоманды, КодировкаТекста.OEM);
	СтрокаКоманды = "cd """ + КаталогПрограммы() + """";
	//ЗаписьКоманды.ЗаписатьСтроку(СтрокаКоманды);
	//СтрокаКоманды = "taskkill /PID 19004 /T /F";
	//ЗаписьКоманды.ЗаписатьСтроку(СтрокаКоманды);
	//СтрокаКоманды = "taskkill /PID 18000 /T /F";
	//ЗаписьКоманды.ЗаписатьСтроку(СтрокаКоманды);
	//СтрокаКоманды = "C:\Windows\SysWoW64\regsvr32.exe /u /s comcntr.dll";
	ЗаписьКоманды.ЗаписатьСтроку(СтрокаКоманды);
	СтрокаКоманды = "C:\Windows\SysWoW64\regsvr32.exe /n /i:user comcntr.dll";
	ЗаписьКоманды.ЗаписатьСтроку(СтрокаКоманды);
	ЗаписьКоманды.ЗаписатьСтроку("del /f /q """ + ФайлКоманды + """");
	ЗаписьКоманды.Закрыть();
	
	Чтение = Новый ЧтениеТекста;
	////Чтение.Открыть("C:\Program Files\1cv8\srvinfo\1cv8wsrv.lst",,,,Ложь);
	Чтение.Открыть(ФайлКоманды,,,,Ложь);
	СтрокаФайла = Чтение.ПрочитатьСтроку();
	Пока ТипЗнч(СтрокаФайла) = Тип("Строка") Цикл
		МассивПутей.Добавить(СтрокаФайла);
		СтрокаФайла = Чтение.ПрочитатьСтроку();
	КонецЦикла;
	
	Оболочка = Новый COMОбъект("Shell.Application");
	// Запуск с передачей глагола действия - повышения привилегий.
	КодВозврата = Оболочка.ShellExecute("cmd", "/c """ + ФайлКоманды + """",, "runas", 1);
	МассивПутей.Добавить(Строка(КодВозврата));
	Оболочка = Неопределено;
	
	//ЗапуститьПриложение("C:\Windows\SysWoW64\regsvr32.exe /s","C:\Windows\SysWoW64",Истина, КодВозврата);
	// ""C:\Program Files\1cv8\8.3.10.2561\bin\comcntr.dll""",, Истина, КодВозврата);
	//V82COMConnector= Новый COMОбъект("V83.COMConnector");
	//
	//ПутьКаталог = "C:\Windows\SysWoW64\";//"C:\Program Files\1cv8\srvinfo\";//КаталогПрограммы();
	//МассивФайлов = НайтиФайлы(ПутьКаталог,"*.*",Истина);
	//Для Каждого Файл Из МассивФайлов Цикл
	//	МассивПутей.Добавить(Файл.ПолноеИмя);
	//КонецЦикла;
	// формируем ссылку на объект
	//WshShell = Новый COMОбъект("WScript.Shell");
	//WScript = Новый COMОбъект("WScript");
	//МассивФайлов = WshShell.Environment("USER");
	//Для Каждого Переменные Из МассивФайлов Цикл
	//	МассивПутей.Добавить(Переменные);
	//КонецЦикла;
	//МассивФайлов = WshShell.Environment("VOLATILE");
	//Для Каждого Переменные Из МассивФайлов Цикл
	//	МассивПутей.Добавить(Переменные);
	//КонецЦикла;
	//МассивФайлов = WshShell.Environment("PROCESS");
	//Для Каждого Переменные Из МассивФайлов Цикл
	//	МассивПутей.Добавить(Переменные);
	//КонецЦикла;
	//strCommand = "%comspec% /c TASKKILL /PID 18000 /T";//TASKLIST /M";
	//strCommand = "C:\Windows\SysWoW64\regsvr32.exe /s ""C:\Program Files\1cv8\8.3.10.2561\bin\comcntr.dll""";//TASKLIST /M";
	//objExecObject = WshShell.Exec(strCommand);
	//WshShell.Run("%COMSPEC% /c ping -n 4 127.0.0.1>nul",0,1);
	//Пока objExecObject.StdOut.AtEndOfStream = Ложь Цикл
	//    МассивПутей.Добавить(objExecObject.StdOut.ReadAll())
	//КонецЦикла;	
	//objExecObject.Terminate();
	
	//WScript.Sleep(1000);
	
	//
	//WshShell.Run("%COMSPEC% /c ping -n 10 127.0.0.1>nul",0,1);
	//
	//strCommand = "%comspec% /c TASKLIST";
	//objExecObject = WshShell.Exec(strCommand);
	//Пока objExecObject.StdOut.AtEndOfStream = Ложь Цикл
	//    МассивПутей.Добавить(objExecObject.StdOut.ReadAll())
	//КонецЦикла;	
	
	//LOCALAPPDATA="C:\Users\SQLLogin\AppData\Local\Temp";
	//ЗапуститьПриложение("tasklist > " + LOCALAPPDATA + "\task.txt",,Ложь, КодВозврата);
	//Чтение = Новый ЧтениеТекста;
	//////Чтение.Открыть("C:\Program Files\1cv8\srvinfo\1cv8wsrv.lst",,,,Ложь);
	//Чтение.Открыть(LOCALAPPDATA + "\task.txt",,,,Ложь);
	//СтрокаФайла = Чтение.ПрочитатьСтроку();
	//Пока ТипЗнч(СтрокаФайла) = Тип("Строка") Цикл
	//	МассивПутей.Добавить(СтрокаФайла);
	//	СтрокаФайла = Чтение.ПрочитатьСтроку();
	//КонецЦикла;
	//V82COMConnector= Новый COMОбъект("V83.COMConnector");
	Возврат МассивПутей;
	//Возврат КодВозврата;
КонецФункции

&НаСервереБезКонтекста
Функция НайтиСтрокиМассива(Массив, СтруктураПоиска)
	НайденныеСтроки = Новый Массив;
	Для Каждого ЭлементМассива Из Массив Цикл
		Совпадение = Истина;
		Для Каждого ЭлементСтруктуры Из СтруктураПоиска Цикл
			ЗначениеНайдено = Ложь;
			Значение = Неопределено;
			Если ЭлементМассива.Свойство(ЭлементСтруктуры.Ключ, Значение) Тогда
				Если Значение = ЭлементСтруктуры.Значение Тогда
					ЗначениеНайдено = Истина;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеНайдено = Ложь Тогда
				Совпадение = Ложь;
			КонецЕсли;
		КонецЦикла;
		Если Совпадение = Истина Тогда
			НайденныеСтроки.Добавить(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;
	Возврат НайденныеСтроки;
КонецФункции

// Функция, позволяющая завершить некий процесс на локальном/удаленном компьютере.
// Параметры:
//    Computer - Имя компьютера.
//    ProccessName - Имя процесса, который необходимо завершить.
// Возвращаемое значение:
//    Количество завершенных процессов.
//
// Рекомендация:
// Перед применением проверить на компьютерах
// Windows Management Instrumentation (WMI):
// 1. Состояние служб.
// 2. Разрешение в брандмауэре.
//
&НаСервереБезКонтекста
Функция Computer_KillProccess(Computer = ".", ProccessName = "")
    
    Попытка
        
        WinMGMT = ПолучитьCOMОбъект("winmgmts:\\" + Computer + "\root\cimv2");
        Win32_Process = WinMGMT.ExecQuery("SELECT * FROM Win32_Process Where Name = '" + ProccessName + "'");
        
        Для Каждого Process ИЗ Win32_Process Цикл
            Process.Terminate();
        КонецЦикла;
        
    Исключение
    КонецПопытки;

    Возврат Win32_Process.Count;

КонецФункции

// Функция, позволяющая получить информацию о процессах на локальном/удаленном компьютере.
// Параметры:
//    Computer - Имя компьютера.
// Возвращаемое значение:
//    Таблица значений.
//
// Рекомендация:
// Перед применением проверить на компьютерах
// Windows Management Instrumentation (WMI):
// 1. Состояние служб.
// 2. Разрешение в брандмауэре.
//
&НаСервереБезКонтекста
Функция Computer_SystemProcess(Computer = ".")
	
    Win32_ProcessInfo = Новый Массив;
	stProccessInfo = Новый ФиксированнаяСтруктура("Caption, CommandLine, CreationDate, CSName, ExecutablePath, OSName, ParentProcessId, ProcessId, WindowsVersion, Owner");
    
    Попытка
        
        WinMGMT = ПолучитьCOMОбъект("winmgmts:\\" + Computer + "\root\cimv2");
        Win32_Process = WinMGMT.ExecQuery("SELECT * FROM Win32_Process");
        
        Для Каждого Proccess ИЗ Win32_Process Цикл
			ProccessInfo = Новый Структура(stProccessInfo);
            ProccessInfo.Caption = Proccess.Caption;
            ProccessInfo.CommandLine = Proccess.CommandLine;
            Попытка
                ProccessInfo.CreationDate = Дата(Лев(Proccess.CreationDate,14));
            Исключение
            КонецПопытки;
            ProccessInfo.CSName = Proccess.CSName;
            ProccessInfo.ExecutablePath = Proccess.ExecutablePath;
            ProccessInfo.OSName = Proccess.OSName;
            ProccessInfo.ParentProcessID = Proccess.ParentProcessID;
            ProccessInfo.ProcessID = Proccess.ProcessID;
            ProccessInfo.WindowsVersion = Proccess.WindowsVersion;
            User = "";
            Domain = "";
            Owner = Proccess.GetOwner(User, Domain);
            Если User = NULL И Domain = NULL Тогда
                ProccessInfo.Owner = "System";
            Иначе
                ProccessInfo.Owner = Domain + "\" + User;
            КонецЕсли;
            Win32_ProcessInfo.Добавить(ProccessInfo);
        КонецЦикла;
        
    Исключение
    КонецПопытки;
    
    Возврат Win32_ProcessInfo;

КонецФункции

// Функция, позволяющая получить информацию о локальных администраторах на локальном/удаленном компьютере.
// Параметры:
//    Computer - Имя компьютера.
// Возвращаемое значение:
//    Таблица значений.
//
// Рекомендация:
// Перед применением проверить на компьютерах
// Windows Management Instrumentation (WMI):
// 1. Состояние служб.
// 2. Разрешение в брандмауэре.
//
&НаСервереБезКонтекста
Функция Computer_LocalAdmins(Computer = ".")
    Win32_objAccountsInfo = Новый Массив;
	stobjAccount = Новый ФиксированнаяСтруктура("Name, Caption, Description, Domain");
    
    Попытка
		objNetwork = Новый COMОбъект("Wscript.Network");
		strComputer = objNetwork.ComputerName;

        WinMGMT = ПолучитьCOMОбъект("winmgmts:{impersonationLevel=impersonate}!\\" + Computer + "\root\cimv2");
        Win32_objAccounts = WinMGMT.ExecQuery("SELECT * From Win32_Group Where LocalAccount = TRUE And SID = 'S-1-5-32-544'");
		
		objComputer = ПолучитьCOMОбъект("WinNT://" + strComputer);
		// Enumerate all local groups and their membership.
		Массив = Новый Массив;
		Массив.Добавить("group");
		objComputer.Filter = Массив;
		Для Каждого objGroup ИЗ objComputer Цикл
			Для Каждого objUser Из objGroup Цикл
				objAccount = Новый Структура;//(stobjAccount);
				objAccount.Name = objUser.Name;
				Win32_objAccountsInfo.Добавить(objAccount);
			КонецЦикла;
		КонецЦикла;
    Исключение
    КонецПопытки;
	
//Set objGroup = GetObject("WinNT://" & strComputer & "/Administrators")

//For Each objUser In objGroup.Members
//If InStr(objUser.ADsPath, "WinNT://GER/ad_") Then
//objGroup.Remove(objUser.AdsPath)
//End If
//Next
    Возврат Win32_objAccountsInfo;

КонецФункции

// Функция, позволяющая получить список событий за период из журналов System/Application локального/удаленного компьютера.
// Параметры:
//    Computer - Имя компьютера.
//    Logfile - Имя LOG-файла (System/Application).
//    EventsType:
//        1 - Error 
//        2 - Warning 
//        3 - Information 
//        4 - Security audit success 
//        5 - Security audit failure
//    DateStart - Дата начала в формате даты.
//    DateEnd - Дата окончания в формате даты.
// Возвращаемое значение:
//    Таблица значений.
//
// Рекомендация:
// Перед применением проверить на компьютерах
// Windows Management Instrumentation (WMI):
// 1. Состояние служб.
// 2. Разрешение в брандмауэре.
//
&НаСервереБезКонтекста
Функция Computer_EventsList(Computer = ".", Logfile = "System", EventType = "0", DateStart = Неопределено, DateEnd = Неопределено)
    
    Если DateStart = Неопределено Тогда
        DateStart = ТекущаяДата();
    КонецЕсли;
    
    Если DateEnd = Неопределено Тогда
        DateEnd = ТекущаяДата();
    КонецЕсли;
    
    FiltreType = ?(EventType = "0", "", " and EventType = " + EventType);
    
    Win32_EventsInfo = Новый Массив;
	stEventsInfo = Новый ФиксированнаяСтруктура("Category, ComputerName, EventCode, Message, RecordNumber, SourceName, TimeWritten, Type, User");
    
    Попытка
        
        WinMGMT = ПолучитьCOMОбъект("winmgmts:\\" + Computer + "\root\cimv2");
        Win32_NTLogEvent = WinMGMT.ExecQuery("SELECT * FROM Win32_NTLogEvent Where Logfile = '" + Logfile + "'" 
        + FiltreType 
        + " and TimeWritten >= '" + НачалоДня(DateStart) + "' and TimeWritten <= '" + КонецДня(DateEnd) + "'");
        
        Для Каждого NTLogEvent ИЗ Win32_NTLogEvent Цикл
            EventsInfo = Новый Структура(stEventsInfo);
            EventsInfo.Category = NTLogEvent.Category;
            EventsInfo.ComputerName = NTLogEvent.ComputerName;
            EventsInfo.EventCode = NTLogEvent.EventCode;
            EventsInfo.Message = NTLogEvent.Message;
            EventsInfo.RecordNumber = NTLogEvent.RecordNumber;
            EventsInfo.SourceName = NTLogEvent.SourceName;
            EventsInfo.TimeWritten = Дата(Лев(NTLogEvent.TimeWritten,14));
            EventsInfo.Type = NTLogEvent.Type;
            EventsInfo.User = NTLogEvent.User;
			Win32_EventsInfo.Добавить(EventsInfo);
        КонецЦикла;
        
    Исключение
    КонецПопытки;

    Возврат Win32_EventsInfo;

КонецФункции

// Функция, позволяющая произвести завершение сеанса/перезагрузку/выключение локаьного/удаленного компьютера.
// Параметры:
//    Computer - Имя компьютера.
//    Flags - Действие:
//    Log Off;
//    0 (0x0)    -    Log Off
//    4 (0x4)    -    Forced Log Off (0 + 4)
//    Shutdown:
//    1 (0x1)    -    Shutdown
//    5 (0x5)    -    Forced Shutdown (1 + 4)
//    Reboot:
//    2 (0x2)    -    Reboot
//    6 (0x6)    -    Forced Reboot (2 + 4)
//    Power Off:
//    8 (0x8)    -    Power Off
//    12 (0xC)-    Forced Power Off (8 + 4)
// Возвращаемое значение:
//    Нет.
//
// Рекомендация:
// Перед применением проверить на компьютерах
// Windows Management Instrumentation (WMI):
// 1. Состояние служб.
// 2. Разрешение в брандмауэре.
//
&НаСервереБезКонтекста
Функция Computer_RebootShutdown(Computer = ".", Flags = 0)
    
    Попытка
        
        WinMGMT = ПолучитьCOMОбъект("winmgmts:{impersonationLevel=impersonate,(Shutdown)}!\\" + Computer + "\root\cimv2");
        Win32_OS = WinMGMT.ExecQuery("SELECT * FROM Win32_OperatingSystem where Primary=true");
        
        Reserved = 0;   // Зарезервированный параметр. Игнорируется.
        Для Каждого OS ИЗ Win32_OS Цикл
            OS.Win32Shutdown(Flags, Reserved);
        КонецЦикла;
        
    Исключение
    КонецПопытки;
    
КонецФункции

// Функция, позволяющая получить список учётных записей на локальном/удаленном компьютере.
// Параметры:
//    Computer - Имя компьютера.
// Возвращаемое значение:
//    Таблица значений.
//
// Рекомендация:
// Перед применением проверить на компьютерах
// Windows Management Instrumentation (WMI):
// 1. Состояние служб.
// 2. Разрешение в брандмауэре.
//
&НаСервереБезКонтекста
Функция Computer_UserList(Computer = ".", АдминистраторПоУмолчанию, ГруппыИПользователи)
	
    Win32_UserAccountInfo = Новый Массив;
	stUserAccountInfo = Новый ФиксированнаяСтруктура("AccountType, Caption, Description, Disabled, Domain, FullName, InstallDate, LocalAccount, Lockout, Name,
	|PasswordChangeable, PasswordExpires, PasswordRequired, SID, BuildINAdministrator, Group");
	
    Попытка
        
        WinMGMT = ПолучитьCOMОбъект("winmgmts:\\" + Computer + "\root\cimv2");
        //Win32_UserAccount = WinMGMT.ExecQuery("SELECT * FROM Win32_UserAccount Where LocalAccount = True");    // Загрузка процессора 75%.
        Win32_UserAccount = WinMGMT.ExecQuery("SELECT * FROM Win32_UserAccount");
        
		Для Каждого UserAccount ИЗ Win32_UserAccount Цикл
			UserAccountInfo = Новый Структура(stUserAccountInfo);
            UserAccountInfo.AccountType = UserAccount.AccountType;
            UserAccountInfo.Caption = UserAccount.Caption;
            UserAccountInfo.Description = UserAccount.Description;
            UserAccountInfo.Disabled = UserAccount.Disabled;
            UserAccountInfo.Domain = UserAccount.Domain;
            UserAccountInfo.FullName = UserAccount.FullName;
            UserAccountInfo.InstallDate = UserAccount.InstallDate;
            UserAccountInfo.LocalAccount = UserAccount.LocalAccount;
            UserAccountInfo.Lockout = UserAccount.Lockout;
            UserAccountInfo.Name = UserAccount.Name;
            UserAccountInfo.PasswordChangeable = UserAccount.PasswordChangeable;
            UserAccountInfo.PasswordExpires = UserAccount.PasswordExpires;
            UserAccountInfo.PasswordRequired = UserAccount.PasswordRequired;
            UserAccountInfo.SID = UserAccount.SID;
            
            // Флажок Встроенная учетная запись администратора.
            UserAccountInfo.BuildINAdministrator = UserAccount.Name = АдминистраторПоУмолчанию.Name;
            
            // Группы, в которые входит пользователь.
            Отбор = Новый Структура("User", UserAccount.Name);
            СтрокиТаблицыГруппыИПользователи = НайтиСтрокиМассива(ГруппыИПользователи, Отбор);
            UserAccountInfo.Group = "";
            Для Каждого СтрокаТаблицы ИЗ СтрокиТаблицыГруппыИПользователи Цикл
                UserAccountInfo.Group = UserAccountInfo.Group + СтрокаТаблицы.Group + "; ";
            КонецЦикла;
            Если СтрДлина(UserAccountInfo.Group) > 0 Тогда
                UserAccountInfo.Group = Лев(UserAccountInfo.Group, СтрДлина(UserAccountInfo.Group)-2);
            КонецЕсли;
            Win32_UserAccountInfo.Добавить(UserAccountInfo);
        КонецЦикла;
        
    Исключение
    КонецПопытки;

    Возврат Win32_UserAccountInfo;
    
КонецФункции

// Функция, позволяющая получить список групп пользователей на локальном/удаленном компьютере.
// Параметры:
//    Computer - Имя компьютера.
// Возвращаемое значение:
//    Таблица значений.
//
// Рекомендация:
// Перед применением проверить на компьютерах
// Windows Management Instrumentation (WMI):
// 1. Состояние служб.
// 2. Разрешение в брандмауэре.
//
&НаСервереБезКонтекста
Функция Computer_GroupList(Computer = ".")
    
    Win32_GroupInfo = Новый ТаблицаЗначений;
    Win32_GroupInfo.Колонки.Добавить("Caption");
    Win32_GroupInfo.Колонки.Добавить("Description");
    Win32_GroupInfo.Колонки.Добавить("Domain");
    Win32_GroupInfo.Колонки.Добавить("LocalAccount");
    Win32_GroupInfo.Колонки.Добавить("Name");
    Win32_GroupInfo.Колонки.Добавить("SID");
    
    Попытка
        
        WinMGMT = ПолучитьCOMОбъект("winmgmts:\\" + Computer + "\root\cimv2");
        Win32_Group = WinMGMT.ExecQuery("SELECT * FROM Win32_Group Where LocalAccount = True");
        
        Для Каждого Group ИЗ Win32_Group Цикл
            GroupInfo = Win32_GroupInfo.Добавить();
            GroupInfo.Caption = Group.Caption;
            GroupInfo.Description = Group.Description;
            GroupInfo.Domain = Group.Domain;
            GroupInfo.LocalAccount = Group.LocalAccount;
            GroupInfo.Name = Group.Name;
            GroupInfo.SID = Group.SID;
        КонецЦикла;
        
    Исключение
    КонецПопытки;

    Возврат Win32_GroupInfo;
    
КонецФункции

// Функция, позволяющая получить список групп и их пользователей на локальном/удаленном компьютере.
// Параметры:
//    Computer - Имя компьютера.
// Возвращаемое значение:
//    Таблица значений.
//
// Рекомендация:
// Перед применением проверить на компьютерах
// Windows Management Instrumentation (WMI):
// 1. Состояние служб.
// 2. Разрешение в брандмауэре.
//
&НаСервереБезКонтекста
Функция Computer_GroupUsersList(Computer = ".")
	
    Win32_GroupUsersInfo = Новый Массив;
	stGroupInfo = Новый ФиксированнаяСтруктура("Group, User");
	
    Попытка
        
        WinMGMT = ПолучитьCOMОбъект("winmgmts:\\" + Computer + "\root\cimv2");
        Win32_GroupUser = WinMGMT.ExecQuery("SELECT * FROM Win32_GroupUser WHERE GroupComponent IS NOT NULL");
        
        Для Каждого GroupUser ИЗ Win32_GroupUser Цикл
            GroupInfo = Новый Структура(stGroupInfo);
            
            // Группа.
            GroupComponent = GroupUser.GroupComponent;
            ПозицицияИмени = Найти(GroupComponent, "Name=");
            GroupInfo.Group = Сред(GroupComponent, ПозицицияИмени+6);
            GroupInfo.Group = СтрЗаменить(GroupInfo.Group, """", "");
            
            // Пользователь.
            PartComponent = GroupUser.PartComponent;
            ПозицицияИмени = Найти(PartComponent, "Name=");
            GroupInfo.User = Сред(PartComponent, ПозицицияИмени+6);
            GroupInfo.User = СтрЗаменить(GroupInfo.User, """", "");
            Win32_GroupUsersInfo.Добавить(GroupInfo);
        КонецЦикла;
        
    Исключение
    КонецПопытки;
    
    Возврат Win32_GroupUsersInfo;
    
КонецФункции

// Функция, позволяющая получить данные встроенной учетной записи Администратора на локальном/удаленном компьютере.
// Параметры:
//    Computer - Имя компьютера.
// Возвращаемое значение:
//    Структура.
//
// Рекомендация:
// Перед применением проверить на компьютерах
// Windows Management Instrumentation (WMI):
// 1. Состояние служб.
// 2. Разрешение в брандмауэре.
//
&НаСервереБезКонтекста
Функция Computer_BuildINAdministrator(Computer = ".")
    
    BuildINAdministratorInfo = Новый Структура("AccountType,Caption,Description,Disabled,Domain,FullName,InstallDate,LocalAccount, Lockout,Name,PasswordChangeable,PasswordExpires,PasswordRequired,SID");
    
    Попытка
        
        WinMGMT = ПолучитьCOMОбъект("winmgmts:\\" + Computer + "\root\cimv2");
        //Win32_UserAccount = WinMGMT.ExecQuery("SELECT * FROM Win32_UserAccount Where LocalAccount = True");    // Загрузка процессора 75%.
        Win32_UserAccount = WinMGMT.ExecQuery("SELECT * FROM Win32_UserAccount");
        
        Для Каждого UserAccount ИЗ Win32_UserAccount Цикл
            AdmSID = Сред(UserAccount.SID,1,6) + "*" + Прав(UserAccount.SID, 4);
            Если AdmSID = "S-1-5-*-500" Тогда
                BuildINAdministratorInfo.AccountType = UserAccount.AccountType;
                BuildINAdministratorInfo.Caption = UserAccount.Caption;
                BuildINAdministratorInfo.Description = UserAccount.Description;
                BuildINAdministratorInfo.Disabled = UserAccount.Disabled;
                BuildINAdministratorInfo.Domain = UserAccount.Domain;
                BuildINAdministratorInfo.FullName = UserAccount.FullName;
                BuildINAdministratorInfo.InstallDate = UserAccount.InstallDate;
                BuildINAdministratorInfo.LocalAccount = UserAccount.LocalAccount;
                BuildINAdministratorInfo.Lockout = UserAccount.Lockout;
                BuildINAdministratorInfo.Name = UserAccount.Name;
                BuildINAdministratorInfo.PasswordChangeable = UserAccount.PasswordChangeable;
                BuildINAdministratorInfo.PasswordExpires = UserAccount.PasswordExpires;
                BuildINAdministratorInfo.PasswordRequired = UserAccount.PasswordRequired;
                BuildINAdministratorInfo.SID = UserAccount.SID;
                Прервать;
            КонецЕсли;
        КонецЦикла;
        
    Исключение
    КонецПопытки;
        
    Возврат BuildINAdministratorInfo;
        
КонецФункции


&НаСервере
Процедура РаспределитьПоступленияТестНаСервере()
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	ОбъектДляСервера.РаспределитьПоступления(0);
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоступленияТест(Команда)
	//РаспределитьПоступленияТестНаСервере();
	
	//Расчёт суммы нераспределённых и суммы для распределения
	СуммаДляРаспределения = 0;
	Для Каждого СтрокаТаб Из Объект.ТаблицаСуммДокументов Цикл
		СуммаДляРаспределения = СуммаДляРаспределения + (СтрокаТаб.Сумма - СтрокаТаб.Распределено);
	КонецЦикла;
	СтрокиОбработки = Объект.ТаблицаЗакупокXLS.НайтиСтроки(Новый Структура("НомерДокумента",""));
	СуммаНераспределенных = 0;
	Для Каждого СтрокаТаб Из СтрокиОбработки Цикл
		СуммаНераспределенных = СуммаНераспределенных + СтрокаТаб.Сумма;
	КонецЦикла;
	Объект.ПроцентЦен = -(100-100*СуммаДляРаспределения/(СуммаНераспределенных));
	
	//Уменьшить строки для распределения, чтобы получилась сумма меньше или равная оставшимся (сумма-распределено)
	ТекущаяСуммаДокумента = СуммаДляРаспределения;
	ЗнакОкругления = 0;
	Для Каждого СтрокаТЧ Из СтрокиОбработки Цикл
		ЦенаСтрокиИзмененная = Окр(СтрокаТЧ.Цена + (Объект.ПроцентЦен * СтрокаТЧ.Цена) / 100, 0);
		ТекущаяСуммаДокумента = ТекущаяСуммаДокумента - ЦенаСтрокиИзмененная * СтрокаТЧ.Количество;
		РазрядностьЦены = СтрДлина(Формат(ЦенаСтрокиИзмененная, "ЧДЦ=; ЧН=0; ЧГ=0"));
		РазрядностьОкругления = 1;
		Если РазрядностьЦены > 2 Тогда
			РазрядностьОкругления = РазрядностьЦены - 2;
		КонецЕсли;
		Если ЗнакОкругления = 0 Тогда
			ЦенаСтрокиОкругленная = Окр(ЦенаСтрокиИзмененная, -(РазрядностьОкругления-1));
		ИначеЕсли ЗнакОкругления = 1 Тогда
			ЦенаСтрокиОкругленная = Pow(10, РазрядностьОкругления-1) * (Цел(ЦенаСтрокиИзмененная / Pow(10, РазрядностьОкругления-1)) + 1);
		ИначеЕсли ЗнакОкругления = -1 Тогда
			ЦенаСтрокиОкругленная = Pow(10, РазрядностьОкругления-1) * (Цел(ЦенаСтрокиИзмененная / Pow(10, РазрядностьОкругления-1)));
		КонецЕсли;
		СтрокаТЧ.Цена = ЦенаСтрокиОкругленная;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТЧ, 0);
		//ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ДокументОбъект.СуммаВключаетНДС);
		
		ТекущаяСуммаДокумента = ТекущаяСуммаДокумента + СтрокаТЧ.Сумма;
		Если ТекущаяСуммаДокумента > СуммаДляРаспределения Тогда
			ЗнакОкругления = -1;
		ИначеЕсли ТекущаяСуммаДокумента < СуммаДляРаспределения Тогда
			ЗнакОкругления = 1;
		Иначе
			ЗнакОкругления = 0;
		КонецЕсли;
	КонецЦикла;
	//Распределяем
	//id = 0;
	Для Каждого СтрокаДокумента Из Объект.ТаблицаСуммДокументов Цикл
		
		//НезаполненныеСтроки = ТаблицаЗакупокXLS.НайтиСтроки(Новый Структура("НомерДокумента, ТипДокумента", "", "ПостВнешнее"));
		ОбработанныеСтроки = Новый Массив;
		КолСтр = СтрокиОбработки.Количество();
		РаспрВДок = 0;
		СтрокаМаксСуммы = Новый Структура("Сумма, Индекс", 0, -1);
		i = 0;
		//ДокументЗаполнен = Ложь;
		Пока i < КолСтр Цикл
		//Для Каждого СтрокаТаб Из СтрокиОбработки Цикл
			СтрокаТаб = СтрокиОбработки[i];
			Если СтрокаДокумента.Сумма - СтрокаДокумента.Распределено >= СтрокаТаб.Сумма Тогда
				СтрокаТаб.НомерДокумента = СтрокаДокумента.Номер;
				СтрокаТаб.НомерСчетфактуры = СтрокаДокумента.Номер;
				СтрокаТаб.ДатаДокумента = СтрокаДокумента.Дата;
				СтрокаТаб.ДокументСсылка = СтрокаДокумента.ДокументСсылка;
				СтрокаДокумента.Распределено = СтрокаДокумента.Распределено + СтрокаТаб.Сумма;
				РаспрВДок = РаспрВДок + СтрокаТаб.Сумма;
				Если СтрокаМаксСуммы.Сумма < СтрокаТаб.Сумма Тогда
					СтрокаМаксСуммы.Сумма = СтрокаТаб.Сумма;
					СтрокаМаксСуммы.Индекс = i;
				КонецЕсли;
				ОбработанныеСтроки.Добавить(i);
			ИначеЕсли СтрокаДокумента.Сумма - СтрокаДокумента.Распределено < СтрокаТаб.Сумма И
				СтрокаДокумента.Сумма - СтрокаДокумента.Распределено > (СтрокаТаб.Сумма * 0.9) И Ложь Тогда
				СтрокаТаб.Сумма = СтрокаДокумента.Сумма - СтрокаДокумента.Распределено;
				СтрокаТаб.Цена = СтрокаТаб.Сумма / СтрокаТаб.Количество;
				СтрокаТаб.НомерДокумента = СтрокаДокумента.Номер;
				СтрокаТаб.НомерСчетфактуры = СтрокаДокумента.Номер;
				СтрокаТаб.ДатаДокумента = СтрокаДокумента.Дата;
				СтрокаТаб.ДокументСсылка = СтрокаДокумента.ДокументСсылка;
				СтрокаДокумента.Распределено = СтрокаДокумента.Распределено + СтрокаТаб.Сумма;
				//ДокументЗаполнен = Истина;
				РаспрВДок = РаспрВДок + СтрокаТаб.Сумма;
				ОбработанныеСтроки.Добавить(i);
			//Иначе
			//	ДокументЗаполнен = Истина;
				//Прервать;
			КонецЕсли;
			Если СтрокаДокумента.Сумма = СтрокаДокумента.Распределено Тогда
				Прервать;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
		Если СтрокаДокумента.Сумма <> СтрокаДокумента.Распределено И СтрокаМаксСуммы.Индекс >= 0 Тогда
			МаксСтрока = СтрокиОбработки[СтрокаМаксСуммы.Индекс];
			РаспрВДок = РаспрВДок + (СтрокаДокумента.Сумма - СтрокаДокумента.Распределено);
			МаксСтрока.Сумма = МаксСтрока.Сумма + (СтрокаДокумента.Сумма - СтрокаДокумента.Распределено);
			МаксСтрока.Цена = МаксСтрока.Сумма / МаксСтрока.Количество;
			СтрокаДокумента.Распределено = СтрокаДокумента.Сумма;
		КонецЕсли;
		Сообщить(Формат(РаспрВДок, "ЧН=0; ЧГ=0"));
		i = ОбработанныеСтроки.Количество();
		Пока i > 0 Цикл
			СтрокаТаб = СтрокиОбработки[ОбработанныеСтроки[i-1]];
			НомерДокумента = СтрокаТаб.НомерДокумента;
			СтрокиОбработки.Удалить(ОбработанныеСтроки[i-1]);
			i = i - 1;
		КонецЦикла;
		//Если СтрокаДокумента.Сумма > СтрокаДокумента.Распределено И ДокументЗаполнен Тогда
		//	СтрокиДок = ТаблицаЗакупокXLS.НайтиСтроки(Новый Структура("НомерДокумента, ТипДокумента", СтрокаДокумента.Номер, "ПостВнешнее"));
		//	ТабСумм = ТаблицаЗакупокXLS.Выгрузить(СтрокиДок, "НомерСтроки, Сумма");
		//	ТабСумм.Сортировать("Сумма Убыв");
		//	МаксСтрока = ТаблицаЗакупокXLS[ТабСумм[0].НомерСтроки - 1];
		//	МаксСтрока.Сумма = МаксСтрока.Сумма + (СтрокаДокумента.Сумма - СтрокаДокумента.Распределено);
		//	МаксСтрока.Цена = МаксСтрока.Сумма / МаксСтрока.Количество;
		//КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВыкупНаСервере()
	//ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	//Попытка
	//	ВыгрузкаЗавершена = ОбъектДляСервера.ЗаполнитьВыкупТоваровПоПериоду("День");
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//КонецПопытки;
	//ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВыкуп(Команда)
	ЗаполнитьВыкупНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИсправитьПредставлениеНомераНаСервере1(ДатаНач, ДатаКон)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка,
	|	ТЧПокупатели.НомерСтроки КАК НомерСтроки,
	|	ТЧПокупатели.Покупатель КАК Покупатель,
	|	ТЧПокупатели.ДатаСФ КАК ДатаСФ,
	|	ТЧПокупатели.СчетФактура КАК СчетФактура
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК Док
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ТЧПокупатели
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|			ПО ТЧПокупатели.СчетФактура = СчетФактураВыданный.Ссылка
	|		ПО Док.Ссылка = ТЧПокупатели.Ссылка
	|ГДЕ
	|	Док.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И Док.Проведен = Истина
	|	И НЕ (СчетФактураВыданный.Номер ПОДОБНО ""А%"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка");
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	ВыборкаДок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
	ЗапросСчФ = Новый Запрос("ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК Док
	|ГДЕ
	|	Док.Организация = &Организация
	|	И Док.Контрагент = &Контрагент
	|	И НАЧАЛОПЕРИОДА(Док.Дата) = &ДатаДок
	|	И (Док.Номер ПОДОБНО ""А%"")");
	Пока ВыборкаДок.Следующий() Цикл
		ДокументОбъект = ВыборкаДок.Ссылка.ПолучитьОбъект();
		Выборка = ВыборкаДок.Выбрать();
		ЗапросСчФ.УстановитьПараметр("Организация", ДокументОбъект.Организация);
		Пока Выборка.Следующий() Цикл
			ЗапросСчФ.УстановитьПараметр("Контрагент", Выборка.Покупатель);
			ЗапросСчФ.УстановитьПараметр("ДатаДок", НачалоДня(Выборка.ДатаСФ));
			ВыборкаСчФ = ЗапросСчФ.Выполнить().Выбрать();
			Если ВыборкаСчФ.Следующий() Тогда
				СтрокаТЧ = ДокументОбъект.Покупатели[Выборка.НомерСтроки - 1];
				Если СтрокаТЧ.СчетФактура = Выборка.СчетФактура Тогда
					СтрокаТЧ.СчетФактура = ВыборкаСчФ.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ДокументОбъект.Модифицированность() Тогда
			Если ДокументОбъект.Проведен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			Иначе
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИсправитьПредставлениеНомераНаСервере(ДатаНач, ДатаКон)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И СчетФактураВыданный.Проведен = Истина
	|	И (СчетФактураВыданный.Номер ПОДОБНО ""МКМС-%"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка");
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	ВыборкаДок = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДок.Следующий() Цикл
		ДокументОбъект = ВыборкаДок.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ПредставлениеНомера = ДокументОбъект.Номер;
		Если ДокументОбъект.Модифицированность() Тогда
			Если ДокументОбъект.Проведен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			Иначе
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИсправитьПредставлениеНомера(Команда)
	ИсправитьПредставлениеНомераНаСервере(Объект.НачалоПериода, КонецДня(Объект.КонецПериода));
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРозничнуюЦенуНаСервере()
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	
	ВыгрузкаЗавершена = ОбъектДляСервера.ЗаполнитьРозничнуюЦену();
	
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРозничнуюЦену(Команда)
	ЗаполнитьРозничнуюЦенуНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РегистрСведенийСписокПриИзмененииНаСервере(Форма)
	НаборЗаписей = Форма.РеквизитФормыВЗначение(Форма.РегистрСведенийСписок);
	НаборЗаписей.Записать();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьНаСервереБезКонтекста(ОснРеквизит)

   ОбъектЗначение = ДанныеФормыВЗначение(ОснРеквизит, Тип("РегистрСведенийНаборЗаписей.ДатыЗапретаИзменения"));

   //ОбъектЗначение.Записать();

   //ЗначениеВДанныеФормы(ОбъектЗначение, ОснРеквизит);

КонецПроцедуры

&НаСервере
Процедура РегистрСведенийСписок_ЗаписатьНаСервере()
   НаборЗаписей = РеквизитФормыВЗначение("РегистрСведенийСписок");
   НаборЗаписей.Записать();
   ЗначениеВРеквизитФормы(НаборЗаписей, "РегистрСведенийСписок");	
КонецПроцедуры

&НаКлиенте
Процедура РегистрСведенийСписокПриИзменении(Элемент)
	//ВыполнитьНаСервереБезКонтекста(РегистрСведенийСписок);
	РегистрСведенийСписок_ЗаписатьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьXLSВычетНаСервере(МассивXLS)
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	ТаблицаXLS = Новый ТаблицаЗначений;
	ТаблицаXLS.Колонки.Добавить("КодТовара", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(11)));
	Если ТипЗнч(МассивXLS) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из МассивXLS Цикл
			Если ЗначениеЗаполнено(ЭлементМассива.К_1) Тогда
				СтрТаб = ТаблицаXLS.Добавить();
				СтрТаб.КодТовара = ЭлементМассива.К_1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	МассивXLS = Неопределено;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТаблицаЗакупокXLS.КодАртикула,
	|	ТаблицаЗакупокXLS.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаЗакупокXLS
	|ИЗ
	|	&ТаблицаЗакупокXLS КАК ТаблицаЗакупокXLS
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаЗакупокXLS.КодАртикула
	|;
	|ВЫБРАТЬ
	|	ТаблицаXLS.КодТовара КАК КодТовара
	|ПОМЕСТИТЬ ТаблицаXLS
	|ИЗ
	|	&ТаблицаXLS КАК ТаблицаXLS
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаXLS.КодТовара
	|;
	|ВЫБРАТЬ
	|	ТаблицаЗакупокXLS.КодАртикула КАК КодАртикула,
	|	ТаблицаЗакупокXLS.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаЗакупокXLS КАК ТаблицаЗакупокXLS
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаXLS КАК ТаблицаXLS
	|	ПО ТаблицаЗакупокXLS.КодАртикула = ТаблицаXLS.КодТовара
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаЗакупокXLS.НомерСтроки УБЫВ");
	Запрос.УстановитьПараметр("ТаблицаЗакупокXLS", ОбъектДляСервера.ТаблицаЗакупокXLS.Выгрузить(, "КодАртикула, НомерСтроки"));
	Запрос.УстановитьПараметр("ТаблицаXLS", ТаблицаXLS);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектДляСервера.ТаблицаЗакупокXLS.Удалить(Выборка.НомерСтроки - 1);
	КонецЦикла;
	ТаблицаXLS = Неопределено;
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьXLSВычет(Команда)
	Перем КолСтрок;
	МассивXLS = ЗагрузитьМетодом_MSADODB(Объект.ФайлXLS, "TDSheet", 1, 0, , КолСтрок);
	ЗагрузитьXLSВычетНаСервере(МассивXLS);
КонецПроцедуры

&НаКлиенте
Функция НайтиСтроки(Таблица, СтруктураПоиска)
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаТаб Из Таблица Цикл
		УсловияВыполнены = Истина;
		Для Каждого ЭлементПоиска Из СтруктураПоиска Цикл
			Если СтрокаТаб[ЭлементПоиска.Ключ] <> ЭлементПоиска.Значение Тогда
				УсловияВыполнены = Ложь;
			КонецЕсли;
		КонецЦикла;
		Если УсловияВыполнены Тогда
			МассивСтрок.Добавить(СтрокаТаб);
		КонецЕсли;
	КонецЦикла;
	Возврат МассивСтрок;
КонецФункции

&НаСервере
Процедура ИзменитьЗакупочныеЦеныОстатковНаСервере()
	СтрокиОбработки = Объект.ТаблицаОстатков;
	ЗнакОкругления = 0;
	Для Каждого СтрокаТЧ Из СтрокиОбработки Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ЦенаЗакупки) Тогда
			Цена = СтрокаТЧ.Сумма / СтрокаТЧ.Количество;
			ЦенаСтрокиИзмененная = Окр(Цена + (Объект.ПроцентЦен * Цена) / 100, 0);
			РазрядностьЦены = СтрДлина(Формат(ЦенаСтрокиИзмененная, "ЧДЦ=; ЧН=0; ЧГ=0"));
			РазрядностьОкругления = 1;
			Если РазрядностьЦены > 2 Тогда
				РазрядностьОкругления = РазрядностьЦены - 2;
			КонецЕсли;
			Если ЗнакОкругления = 0 Тогда
				ЦенаСтрокиОкругленная = Окр(ЦенаСтрокиИзмененная, -(РазрядностьОкругления-1));
			ИначеЕсли ЗнакОкругления = 1 Тогда
				ЦенаСтрокиОкругленная = Pow(10, РазрядностьОкругления-1) * (Цел(ЦенаСтрокиИзмененная / Pow(10, РазрядностьОкругления-1)) + 1);
			ИначеЕсли ЗнакОкругления = -1 Тогда
				ЦенаСтрокиОкругленная = Pow(10, РазрядностьОкругления-1) * (Цел(ЦенаСтрокиИзмененная / Pow(10, РазрядностьОкругления-1)));
			КонецЕсли;
			СтрокаТЧ.ЦенаЗакупки = ЦенаСтрокиОкругленная;
		КонецЕсли;
		СтрокаТЧ.Сумма = СтрокаТЧ.ЦенаЗакупки * СтрокаТЧ.Количество;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗакупочныеЦеныОстатков(Команда)
	ИзменитьЗакупочныеЦеныОстатковНаСервере();
КонецПроцедуры

ТипыДокументов = Новый Структура;
ТипыДокументов.Вставить("Импорт", Истина);
ТипыДокументов.Вставить("Поступление", Истина);
ТипыДокументов.Вставить("Отгрузка", Истина);
ТипыДокументов.Вставить("ПередачаНаКомис", Истина);
ТипыДокументов.Вставить("ПродажаРозница", Истина);
ТипыДокументов.Вставить("ПродРознTaxFree", Истина);
ТипыДокументов.Вставить("ВозвратРозница", Истина);
ТипыДокументов.Вставить("ПродажаДистриб", Истина);
ТипыДокументов.Вставить("ВозвратДистриб", Истина);
ТипыДокументов.Вставить("ПродажаОпт", Истина);
ТипыДокументов.Вставить("ВозвратОпт", Истина);
ТипыДокументов.Вставить("ПостНекоммерция", Истина);
ТипыДокументов.Вставить("ГТДНекоммерция", Истина);
ТипыДокументов.Вставить("ПостВнешнее", Истина);
ТипыДокументов.Вставить("РеалВнешняя", Истина);
ТипыДокументов.Вставить("РеалНекоммерция", Истина);
ТипыДокументов.Вставить("ОтчётКомитенту", Ложь);
ТипыДокументов.Вставить("ОстРеализ", Ложь);
ТипыДокументов.Вставить("ОстПоступл", Ложь);
ТипыДокументов.Вставить("ОстОприход", Ложь);
ТипыДокументов.Вставить("Разукомплект", Ложь);
ТипыДокументов.Вставить("Укомплект", Ложь);
ТипыДокументов.Вставить("Пересорт", Ложь);
ТипыДокументов.Вставить("СнятиеЗвена", Ложь);
ТипыДокументов.Вставить("УстановкаЗвена", Ложь);
